{'0586bf90a5eb931ab7ceda2b9491dd10': {'cmd': '$ cat /tmp/myapp.py',
                                      'res': '#!/usr/bin/env python\n'
                                             '"""\n'
                                             '# Simple Test App\n'
                                             '- Spawns a thread\n'
                                             '- Logs\n'
                                             '- Uses Flags\n'
                                             '"""\n'
                                             'from devapp.app import init_app, '
                                             'FLG\n'
                                             'from devapp.tools import '
                                             'define_flags\n'
                                             'import sys\n'
                                             "sys.path.append('.')\n"
                                             'from mymain import main \n'
                                             '\n'
                                             'class AppFlags:\n'
                                             "  autoshort = ''\n"
                                             '  class greeted:\n'
                                             "    '''Who is greeted'''\n"
                                             "    s = 'G'\n"
                                             "    d = 'World'\n"
                                             'define_flags(AppFlags)\n'
                                             '\n'
                                             '\n'
                                             "if __name__ == '__main__':\n"
                                             "    init_app().info('Starting "
                                             "main')\n"
                                             '    main()'},
 '6ad18330a9790ac7474a258c4a9fa5a9': [{'cmd': {'cmd': 'python /tmp/myapp.py '
                                                      '-hf log'},
                                       'res': '$ python /tmp/myapp.py -hf log\n'
                                              '\n'
                                              '\x1b[1m\x1b[38;5;11mSimple Test '
                                              'App\n'
                                              '────────────────────────────────────────────────────────────────────────────────\n'
                                              '\x1b[0m\x1b[38;5;5m❖ '
                                              '\x1b[39mSpawns a thread\n'
                                              '\x1b[38;5;5m❖ \x1b[39mLogs\n'
                                              '\x1b[38;5;5m❖ \x1b[39mUses '
                                              'Flags\n'
                                              '\n'
                                              '\n'
                                              'All supported command line '
                                              'flags [matching '
                                              '\x1b[1m\x1b[32mlog\x1b[0m]:\n'
                                              '\x1b[1m\x1b[34mabsl.logging\n'
                                              '\x1b[0m\x1b[32m        '
                                              '\x1b[1m\x1b[33malsologtostderr          '
                                              '\x1b[0m\x1b[31mFalse\n'
                                              '\x1b[38;5;245malso log to '
                                              'stderr? \n'
                                              '\x1b[32m        '
                                              '\x1b[1m\x1b[33mlog_dir                  '
                                              "\x1b[0m\x1b[31m''\n"
                                              '\x1b[38;5;245mdirectory to '
                                              'write logfiles into \n'
                                              '\x1b[32m        '
                                              '\x1b[1m\x1b[33mlogger_levels            '
                                              "\x1b[0m\x1b[31m''\n"
                                              '\x1b[38;5;245mSpecify log level '
                                              'of loggers. The format is a CSV '
                                              'list of `name:level`. Where '
                                              '`name` is the logger name used '
                                              'with `logging.getLogger()`, and '
                                              '`level` is a level name  (INFO, '
                                              'DEBUG, etc). e.g. '
                                              '`myapp.foo:INFO,other.logger:DEBUG` \n'
                                              '\x1b[32m        '
                                              '\x1b[1m\x1b[33mlogtostderr              '
                                              '\x1b[0m\x1b[31mFalse\n'
                                              '\x1b[38;5;245mShould only log '
                                              'to stderr? \n'
                                              '\x1b[32m        '
                                              '\x1b[1m\x1b[33mshowprefixforinfo        '
                                              '\x1b[0m\x1b[31mTrue\n'
                                              '\x1b[38;5;245mIf False, do not '
                                              'prepend prefix to info messages '
                                              "when it's logged to stderr, "
                                              '--verbosity is set to INFO '
                                              'level, and python logging is '
                                              'used. \n'
                                              '\x1b[32m        '
                                              '\x1b[1m\x1b[33mstderrthreshold          '
                                              '\x1b[0m\x1b[31mfatal\n'
                                              '\x1b[38;5;245mlog messages at '
                                              'this level, or more severe, to '
                                              'stderr in addition to the '
                                              'logfile.  Possible values are '
                                              "'debug', 'info', 'warning', "
                                              "'error', and 'fatal'.  "
                                              'Obsoletes --alsologtostderr. '
                                              'Using --alsologtostderr cancels '
                                              'the effect of this flag. Please '
                                              'also note that this flag is '
                                              'subject to --verbosity and '
                                              'requires logfile not be '
                                              'stderr. \n'
                                              '\x1b[32mv       '
                                              '\x1b[1m\x1b[33mverbosity                '
                                              '\x1b[0m\x1b[31m-1\n'
                                              '\x1b[38;5;245mLogging verbosity '
                                              'level. Messages logged at this '
                                              'level or lower will be '
                                              'included. Set to 1 for debug '
                                              'logging. If the flag was not '
                                              'set or supplied, the value will '
                                              'be changed from the default of '
                                              '-1 (warning) to 0 (info) after '
                                              'flags are parsed. \n'
                                              '\x1b[1m\x1b[34mdevapp.tools\n'
                                              '\x1b[0m\x1b[32mdasdi   '
                                              '\x1b[1m\x1b[33msensitive_data_identifiers '
                                              '\x1b[0m\x1b[31mpass.*|.*secret.*\n'
                                              '\x1b[38;5;245mRegexp which '
                                              'helps identify keys carrying '
                                              'sensitive information (for '
                                              'filtering out of logs). Case '
                                              'insensitive matching. \n'
                                              '\x1b[1m\x1b[34mstructlogging.sl\n'
                                              '\x1b[0m\x1b[32mlatn    '
                                              '\x1b[1m\x1b[33mlog_add_thread_name      '
                                              '\x1b[0m\x1b[31mFalse\n'
                                              '\x1b[38;5;245mAdd name of '
                                              'thread \n'
                                              '\x1b[32mldcnt   '
                                              '\x1b[1m\x1b[33mlog_dev_coljson_no_truecolor '
                                              '\x1b[0m\x1b[31mFalse\n'
                                              '\x1b[38;5;245mNOT use true '
                                              'color for styles (e.g. when no '
                                              'terminal support) \n'
                                              '\x1b[32mldcs    '
                                              '\x1b[1m\x1b[33mlog_dev_coljson_style    '
                                              '\x1b[0m\x1b[31mdark\n'
                                              '\x1b[38;5;245m Pygments style '
                                              'for colorized json. To use the '
                                              '16 base colors and leave it to '
                                              'the terminal palette how to '
                                              'render: Choose light or dark '
                                              '<abap|algol|algol_nu|arduino|autumn|ax|borland|bw|coffee|colorful|dark|default|dracula|emacs|friendly|friendly_grayscale|fruity|github-dark|gruvbox-dark|gruvbox-light|igor|inkpot|light|lightbulb|lilypond|lovelace|manni|material|monokai|murphy|native|nord|nord-darker|one-dark|paraiso-dark|paraiso-light|pastie|perldoc|rainbow_dash|rrt|sas|solarized-dark|solarized-light|staroffice|stata-dark|stata-light|tango|trac|vim|vs|xcode|zenburn>\n'
                                              '\x1b[32mlddnm   '
                                              '\x1b[1m\x1b[33mlog_dev_dimm_no_match    '
                                              '\x1b[0m\x1b[31mFalse\n'
                                              '\x1b[38;5;245mDimm not matching '
                                              'lines (in colored output '
                                              'only) \n'
                                              '\x1b[32mldfc    '
                                              '\x1b[1m\x1b[33mlog_dev_fmt_coljson      '
                                              '\x1b[0m\x1b[31mjson,payload\n'
                                              '\x1b[38;5;245mList of keys to '
                                              'log as json. \n'
                                              '\x1b[32mldm     '
                                              '\x1b[1m\x1b[33mlog_dev_match            '
                                              "\x1b[0m\x1b[31m''\n"
                                              '\x1b[38;5;245mRegex to search '
                                              'in loglines - will be '
                                              'highlighted. \n'
                                              '\x1b[32mlf      '
                                              '\x1b[1m\x1b[33mlog_fmt                  '
                                              '\x1b[0m\x1b[31mauto\n'
                                              '\x1b[38;5;245mForce a log '
                                              'format. 0: off, 1: auto, 2: '
                                              'plain, 3: plain_no_colors, 4: '
                                              'json.   \n'
                                              '\x1b[38;5;241m🟢 Json logging '
                                              'has far better performance then '
                                              'the colored console dev log.\n'
                                              'You can pipe e.g. journalctl '
                                              'output into "ops log_view -fn '
                                              '-" to get dev logging from '
                                              'json.\n'
                                              '\n'
                                              'This value can be set away from '
                                              'auto via export log_fmt as '
                                              'well.\n'
                                              '\x1b[32mll      '
                                              '\x1b[1m\x1b[33mlog_level                '
                                              '\x1b[0m\x1b[31m20\n'
                                              '\x1b[38;5;245mLog level (10: '
                                              'debug, 20: info, ...). You may '
                                              'also say log_level=error \n'
                                              '\x1b[32mlsf     '
                                              '\x1b[1m\x1b[33mlog_stack_filter         '
                                              '\x1b[0m\x1b[31mfn not contains '
                                              'frozen and fn not contains '
                                              '/rx/\n'
                                              '\x1b[38;5;245mWhen logging '
                                              'error tracebacks this is an '
                                              'optional filter. Keywords:fn: '
                                              'filename, frame: frame nr, '
                                              'line: line nr, name: name of '
                                              'callable  \n'
                                              '\x1b[38;5;241mExample: fn '
                                              'contains project and frame lt 1 '
                                              '(axiros/pycond expression)\n'
                                              '\x1b[32mlsmf    '
                                              '\x1b[1m\x1b[33mlog_stack_max_frames     '
                                              '\x1b[0m\x1b[31m3\n'
                                              '\x1b[38;5;245mMaximum Frames '
                                              'Shown in Terminal Stack '
                                              'Traces \n'
                                              '\x1b[32mltln    '
                                              '\x1b[1m\x1b[33mlog_thread_local_names   '
                                              '\x1b[0m\x1b[31mFalse\n'
                                              '\x1b[38;5;245mPrefer thread '
                                              'local logger_name, when set \n'
                                              '\x1b[32mltf     '
                                              '\x1b[1m\x1b[33mlog_time_fmt             '
                                              '\x1b[0m\x1b[31m%m-%d %H:%M:%S\n'
                                              '\x1b[38;5;245mLog time format. '
                                              'Shortcuts: "ISO", "dt" \n'
                                              '\x1b[32mlts     '
                                              '\x1b[1m\x1b[33mlog_to_stdout            '
                                              '\x1b[0m\x1b[31mFalse\n'
                                              '\x1b[38;5;245mDefault: stderr \n'
                                              '\n'
                                              '\n'
                                              '\x1b[39m'},
                                      {'cmd': {'cmd': 'python /tmp/myapp.py '
                                                      '-hf greet'},
                                       'res': '$ python /tmp/myapp.py -hf '
                                              'greet\n'
                                              '\n'
                                              '\x1b[1m\x1b[38;5;11mSimple Test '
                                              'App\n'
                                              '────────────────────────────────────────────────────────────────────────────────\n'
                                              '\x1b[0m\x1b[38;5;5m❖ '
                                              '\x1b[39mSpawns a thread\n'
                                              '\x1b[38;5;5m❖ \x1b[39mLogs\n'
                                              '\x1b[38;5;5m❖ \x1b[39mUses '
                                              'Flags\n'
                                              '\n'
                                              '\n'
                                              'All supported command line '
                                              'flags [matching '
                                              '\x1b[1m\x1b[32mgreet\x1b[0m]:\n'
                                              '\x1b[1m\x1b[34mmymain\n'
                                              '\x1b[0m\x1b[32mg       '
                                              '\x1b[1m\x1b[33mgreeting                 '
                                              '\x1b[0m\x1b[31mHi\n'
                                              '\x1b[38;5;245mGreeting \n'
                                              '\x1b[1m\x1b[34mmyapp.py\n'
                                              '\x1b[0m\x1b[32mG       '
                                              '\x1b[1m\x1b[33mgreeted                  '
                                              '\x1b[0m\x1b[31mWorld\n'
                                              '\x1b[38;5;245mWho is greeted  \n'
                                              '\n'
                                              '\n'
                                              '\x1b[39m'},
                                      {'cmd': {'cmd': 'python /tmp/myapp.py '
                                                      '-G=Joe -ll 10 -latn'},
                                       'res': '$ python /tmp/myapp.py -G=Joe '
                                              '-ll 10 -latn\n'
                                              '\x1b[1;2m\x1b[38;5;201m\x1b[48;5;0m0\x1b[0m '
                                              '\x1b[2m\x1b[38;5;5m08-03 '
                                              '15:58:20 [\x1b[38;5;4minfo     '
                                              '] \x1b[0mStarting '
                                              'main                  '
                                              '[\x1b[38;5;5mmyapp\x1b[39m]\n'
                                              '\x1b[1;2m\x1b[38;5;201m\x1b[48;5;0m0\x1b[0m '
                                              '\x1b[2m\x1b[38;5;5m08-03 '
                                              '15:58:20 [debug    ] \x1b[0mHi '
                                              'Joe                         '
                                              '[\x1b[38;5;5mmyapp\x1b[39m] '
                                              '\x1b[1m\x1b[38;5;1mgreeted=\x1b[2m\x1b[38;5;5mJoe'}],
 '786f84d2b3af701d884c8870471e1bd0': {'cmd': '$ cat /tmp/myapp.py',
                                      'res': '#!/usr/bin/env python\n'
                                             '"""\n'
                                             '# Simple Test App\n'
                                             '- Spawns a thread\n'
                                             '- Logs\n'
                                             '"""\n'
                                             'from threading import Thread\n'
                                             'from devapp.app import init_app\n'
                                             '\n'
                                             'app = '
                                             "init_app(log_time_fmt='dt', "
                                             "log_dev_match='main', "
                                             'log_add_thread_name=True)\n'
                                             '\n'
                                             'def main():\n'
                                             "    app.info('In main', "
                                             "foo='bar', json={'bar': {'foo': "
                                             'True}})\n'
                                             '\n'
                                             "if __name__ == '__main__':\n"
                                             "    app.info('Starting main')\n"
                                             '    t = Thread(target=main, '
                                             'daemon=True).start()\n'
                                             '\n'},
 'ade653c9242109680b7e77fa88517a01': [{'cmd': {'cmd': 'python /tmp/myapp.py'},
                                       'res': '$ python /tmp/myapp.py\n'
                                              '\x1b[1;2m\x1b[38;5;201m\x1b[48;5;0m0\x1b[0m '
                                              '\x1b[2m\x1b[38;5;5m7 '
                                              '[\x1b[38;5;4minfo     ] '
                                              '\x1b[0mStarting '
                                              '\x1b[1m\x1b[38;5;124m\x1b[48;5;255mmain\x1b[0m                  '
                                              '[\x1b[38;5;5mmyapp\x1b[39m]\n'
                                              '\x1b[1;2m\x1b[38;5;201m\x1b[48;5;37m^\x1b[0m '
                                              '\x1b[2m\x1b[38;5;5m7 '
                                              '[\x1b[38;5;4minfo     ] '
                                              '\x1b[0mIn '
                                              '\x1b[1m\x1b[38;5;124m\x1b[48;5;255mmain\x1b[0m                        '
                                              '[\x1b[38;5;5mmyapp\x1b[39m] '
                                              '\x1b[1m\x1b[38;5;1mfoo=\x1b[2m\x1b[38;5;5mbar '
                                              '\x1b[38;5;1mjson=\x1b[0m{\x1b[94m"bar"\x1b[39m:\x1b[90m '
                                              '\x1b[39m{\x1b[94m"foo"\x1b[39m:\x1b[90m '
                                              '\x1b[94mtrue\x1b[39m}}'}],
 'd6246bda4b801c284553438e61f723df': {'cmd': '$ cat /tmp/mymain.py',
                                      'res': 'from devapp.app import app, FLG\n'
                                             'from devapp.tools import '
                                             'define_flags\n'
                                             '\n'
                                             'class Flags:\n'
                                             "  autoshort = ''\n"
                                             '  class greeting:\n'
                                             "    d = 'Hi'\n"
                                             'define_flags(Flags)\n'
                                             '\n'
                                             'main = lambda: '
                                             "app.debug(f'{FLG.greeting} "
                                             "{FLG.greeted}', "
                                             'greeted=FLG.greeted)\n'
                                             '\n'}}