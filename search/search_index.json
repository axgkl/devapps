{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"devapps","text":"<p>This is an enabler repo to develop \"ops friendly\" apps in a normalized way, incl:</p> <ul> <li>logging (structlog)</li> <li>cli flags handling (abseil, with addons)</li> <li>docu (mkdocs-material)</li> <li>project setup</li> <li>(test) resoures management, including daemons and container filesystem layers</li> </ul> <p>and more.</p> <p>Last modified: Fri, 15 Aug 2025 09h GMT</p> General Questions and Feature Requests <p> </p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#advanced-logging-features","title":"Advanced Logging Features","text":"<p>We added a few processors and console rendering features to the awesome structlog.</p> <p>Example usage:</p> <pre><code>$ cat /tmp/myapp.py\nfrom threading import Thread\nfrom devapp.app import init_app\n\n# log time deltas in millis, highlight 'main' strings, add unique symbol for threads\napp = init_app(log_time_fmt='dt', log_dev_match='main', log_add_thread_name=True)\n\n# by default kw 'json' and 'payload' will be colorized using pygments' json lexer:\nmain = lambda: app.info('In main', foo='bar', json={'bar': {'foo': True}})\n\nif __name__ == '__main__':\n    app.info('Starting main')\n    t = Thread(target=main, daemon=True).start()\n</code></pre> <p></p> <pre><code>$ python /tmp/myapp.py\n\u001b[1;2m\u001b[38;5;201m\u001b[48;5;0m0\u001b[0m \u001b[2m\u001b[38;5;5m23 [\u001b[38;5;4minfo     ] \u001b[0mStarting \u001b[1m\u001b[38;5;124m\u001b[48;5;255mmain\u001b[0m                  [\u001b[38;5;5mmyapp\u001b[39m]\n \u001b[2m\u001b[38;5;5m24 [\u001b[38;5;4minfo     ] \u001b[0mIn \u001b[1m\u001b[38;5;124m\u001b[48;5;255mmain\u001b[0m                        [\u001b[38;5;5mmyapp\u001b[39m] \u001b[1m\u001b[38;5;1mfoo=\u001b[2m\u001b[38;5;5mbar \u001b[38;5;1mjson=\u001b[0m{\u001b[94m\"bar\"\u001b[39m:\u001b[90m \u001b[39m{\u001b[94m\"foo\"\u001b[39m:\u001b[90m \u001b[94mtrue\u001b[39m}}\n</code></pre>"},{"location":"quickstart/#flags","title":"Flags","text":"<p>Via nested classes, devapps allows to define absl flags:</p> <pre><code>$ cat /tmp/mymain.py\nfrom devapp.app import app, FLG\nfrom devapp.tools import define_flags\n\nclass Flags:\n  autoshort = '' # prefix for short flag keys, built with collision avoidance \n  class greeting:\n    d = 'Hi'\n  # more.., incl. action flags and complex types\n\ndefine_flags(Flags)\n\nmain = lambda: app.debug(f'{FLG.greeting} {FLG.greeted}', greeted=FLG.greeted)\n</code></pre> <pre><code>$ cat /tmp/myapp.py\n#!/usr/bin/env python\n\"\"\"\n# Simple Test App\n- Spawns a thread\n- Logs\n- Uses Flags\n\"\"\"\nfrom devapp.app import init_app\nimport sys\nsys.path.append('.')\nfrom mymain import main # flags found anywhere imported\n\nclass AppFlags:\n  autoshort = ''\n  class greeted:\n    '''Who is greeted'''\n    s = 'G' # explicit short. See help output below\n    d = 'World'\n\n\nif __name__ == '__main__':\n    init_app(flags=AppFlags).info('Starting main')\n    main()\n</code></pre> <p></p> <pre><code>$ python /tmp/myapp.py -h\n\n\u001b[1m\u001b[38;5;11mSimple Test App\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u001b[0m\u001b[38;5;5m\u2756 \u001b[39mSpawns a thread\n\u001b[38;5;5m\u2756 \u001b[39mLogs\n\u001b[38;5;5m\u2756 \u001b[39mUses Flags\n\n\n\u001b[1m\u001b[34mmyapp.py\n\u001b[0m\u001b[32mG     \u001b[1m\u001b[33mgreeted         \u001b[0m\u001b[31mWorld       \u001b[38;5;245mWho is greeted\n\n\u001b[36m-hf [match string]\u001b[39m: List \u001b[1m\u001b[36mALL\u001b[0m (matching) flags. E.g. -hf or -hf log.\n$ python /tmp/myapp.py -hf log_\n\n\u001b[1m\u001b[38;5;11mSimple Test App\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u001b[0m\u001b[38;5;5m\u2756 \u001b[39mSpawns a thread\n\u001b[38;5;5m\u2756 \u001b[39mLogs\n\u001b[38;5;5m\u2756 \u001b[39mUses Flags\n\n\nAll supported command line flags [matching \u001b[1m\u001b[32mlog_\u001b[0m]:\n\u001b[1m\u001b[34mabsl.logging\n\u001b[0m\u001b[32m        \u001b[1m\u001b[33mlog_dir                  \u001b[0m\u001b[31m''\n\u001b[38;5;245mdirectory to write logfiles into \n\u001b[1m\u001b[34mstructlogging.sl\n\u001b[0m\u001b[32mlatn    \u001b[1m\u001b[33mlog_add_thread_name      \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mAdd name of thread \n\u001b[32mldcnt   \u001b[1m\u001b[33mlog_dev_coljson_no_truecolor \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mNOT use true color for styles (e.g. when no terminal support) \n\u001b[32mldcs    \u001b[1m\u001b[33mlog_dev_coljson_style    \u001b[0m\u001b[31mdark\n\u001b[38;5;245m Pygments style for colorized json. To use the 16 base colors and leave it to the terminal palette how to render: Choose light or dark &lt;abap|algol|algol_nu|arduino|autumn|ax|borland|bw|coffee|colorful|dark|default|dracula|emacs|friendly|friendly_grayscale|fruity|github-dark|gruvbox-dark|gruvbox-light|igor|inkpot|light|lightbulb|lilypond|lovelace|manni|material|monokai|murphy|native|nord|nord-darker|one-dark|paraiso-dark|paraiso-light|pastie|perldoc|rainbow_dash|rrt|sas|solarized-dark|solarized-light|staroffice|stata-dark|stata-light|tango|trac|vim|vs|xcode|zenburn&gt;\n\u001b[32mlddnm   \u001b[1m\u001b[33mlog_dev_dimm_no_match    \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mDimm not matching lines (in colored output only) \n\u001b[32mldfc    \u001b[1m\u001b[33mlog_dev_fmt_coljson      \u001b[0m\u001b[31mjson,payload\n\u001b[38;5;245mList of keys to log as json. \n\u001b[32mldm     \u001b[1m\u001b[33mlog_dev_match            \u001b[0m\u001b[31m''\n\u001b[38;5;245mRegex to search in loglines - will be highlighted. \n\u001b[32mlf      \u001b[1m\u001b[33mlog_fmt                  \u001b[0m\u001b[31mauto\n\u001b[38;5;245mForce a log format. 0: off, 1: auto, 2: plain, 3: plain_no_colors, 4: json.   \n\u001b[38;5;241m\ud83d\udfe2 Json logging has far better performance then the colored console dev log.\nYou can pipe e.g. journalctl output into \"ops log_view -fn -\" to get dev logging from json.\n\nThis value can be set away from auto via export log_fmt as well.\n\u001b[32mll      \u001b[1m\u001b[33mlog_level                \u001b[0m\u001b[31m20\n\u001b[38;5;245mLog level (10: debug, 20: info, ...). You may also say log_level=error \n\u001b[32mlsf     \u001b[1m\u001b[33mlog_stack_filter         \u001b[0m\u001b[31mfn not contains frozen and fn not contains /rx/\n\u001b[38;5;245mWhen logging error tracebacks this is an optional filter. Keywords:fn: filename, frame: frame nr, line: line nr, name: name of callable  \n\u001b[38;5;241mExample: fn contains project and frame lt 1 (axiros/pycond expression)\n\u001b[32mlsmf    \u001b[1m\u001b[33mlog_stack_max_frames     \u001b[0m\u001b[31m3\n\u001b[38;5;245mMaximum Frames Shown in Terminal Stack Traces \n\u001b[32mltln    \u001b[1m\u001b[33mlog_thread_local_names   \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mPrefer thread local logger_name, when set \n\u001b[32mltf     \u001b[1m\u001b[33mlog_time_fmt             \u001b[0m\u001b[31m%m-%d %H:%M:%S\n\u001b[38;5;245mLog time format. Shortcuts: \"ISO\", \"dt\" \n\u001b[32mlts     \u001b[1m\u001b[33mlog_to_stdout            \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mDefault: stderr\n\n\n\u001b[39m\n$ python /tmp/myapp.py -hf greet\n\n\u001b[1m\u001b[38;5;11mSimple Test App\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u001b[0m\u001b[38;5;5m\u2756 \u001b[39mSpawns a thread\n\u001b[38;5;5m\u2756 \u001b[39mLogs\n\u001b[38;5;5m\u2756 \u001b[39mUses Flags\n\n\nAll supported command line flags [matching \u001b[1m\u001b[32mgreet\u001b[0m]:\n\u001b[1m\u001b[34mmymain\n\u001b[0m\u001b[32mg       \u001b[1m\u001b[33mgreeting                 \u001b[0m\u001b[31mHi\n\u001b[38;5;245mGreeting \n\u001b[1m\u001b[34mmyapp.py\n\u001b[0m\u001b[32mG       \u001b[1m\u001b[33mgreeted                  \u001b[0m\u001b[31mWorld\n\u001b[38;5;245mWho is greeted\n\n\n\u001b[39m\n$ python /tmp/myapp.py -G=Joe -ll 10 -latn\n\u001b[1;2m\u001b[38;5;201m\u001b[48;5;0m0\u001b[0m \u001b[2m\u001b[38;5;5m08-15 09:41:55 [\u001b[38;5;4minfo     ] \u001b[0mStarting main                  [\u001b[38;5;5mmyapp\u001b[39m]\n\u001b[1;2m\u001b[38;5;201m\u001b[48;5;0m0\u001b[0m \u001b[2m\u001b[38;5;5m08-15 09:41:55 [debug    ] \u001b[0mHi Joe                         [\u001b[38;5;5mmyapp\u001b[39m] \u001b[1m\u001b[38;5;1mgreeted=\u001b[2m\u001b[38;5;5mJoe\n\u001b[0m\n</code></pre>"},{"location":"about/changelog/","title":"Changelog","text":""},{"location":"about/changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog.</p> <p>This project adheres to CalVer Versioning .</p>"},{"location":"about/changelog/#202181","title":"2021.8.1","text":"<p>Compare with 2021.5.10</p>"},{"location":"about/changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Element tree in 3.9 no getchildren anymore. (4cb2506 by Gunther Klessinger).</li> <li>Better fsbuild (e806498 by Gunther Klessinger).</li> <li>Removed cached termwidth, is now fast (f526a2d by Gunther Klessinger).</li> </ul>"},{"location":"about/changelog/#features","title":"Features","text":"<ul> <li>Default action (4a98d13 by Gunther Klessinger).</li> <li>Actions support on cli (6a7cb03 by Gunther Klessinger).</li> </ul>"},{"location":"about/changelog/#2021510","title":"2021.5.10","text":"<p>Compare with first commit</p>"},{"location":"about/changelog/#features_1","title":"Features","text":"<ul> <li>First commit (dfa77dc by Gunther Klessinger).</li> </ul>"},{"location":"about/contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"about/contributing/#tasks","title":"Tasks","text":"<p>This project uses Duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following:</p> <ol> <li><code>export PYTHON_VERSIONS=</code>: this will run the task    with only the current Python version</li> <li>run the task directly with <code>poetry run duty TASK</code>,    or <code>duty TASK</code> if the environment was already activated    through <code>poetry shell</code></li> </ol> <p>The Makefile detects if the Poetry environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p>"},{"location":"about/contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git checkout -b feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>If you updated the documentation or the project dependencies:</p> <ol> <li>run <code>make docs-regen</code></li> <li>run <code>make docs-serve</code>,    go to http://localhost:8000 and check that everything looks good</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"about/contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commits messages must follow the Angular style:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes which are not features nor bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end:</p> <pre><code>Body.\n\nReferences: #10, #11.\nFixes #15.\n</code></pre>"},{"location":"about/contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash master\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"about/credits/","title":"CREDITS","text":""},{"location":"about/credits/#run-dependencies","title":"Run Dependencies","text":"Package Description Version License <code>absl-py</code> Abseil Python Common Libraries, see https://github.com/abseil/abseil-py. 2.3.1 n.a. <code>inflection</code> A port of Ruby on Rails inflector to Python 0.5.1 MIT <code>jsondiff</code> Diff JSON and JSON-like structures in Python 2.2.1 The MIT  (MIT) <p>Copyright (c) 2015 Zoomer Analytics LLC</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sub, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>|<code>pycond</code>|Lightweight Condition Parsing and Building of Evaluation Expressions |20230212|BSD |<code>requests</code>|Python HTTP for Humans. |2.32.4|Apache-2.0 |<code>rich</code>|Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal |14.0.0|MIT |<code>structlog</code>|Structured Logging for Python |25.4.0|n.a. |<code>toml</code>|Python Library for Tom's Obvious, Minimal Language |0.10.2|MIT</p>"},{"location":"about/credits/#development-dependencies","title":"Development Dependencies","text":"Package Description Version License"},{"location":"about/credits/#indirect-dependencies","title":"Indirect Dependencies","text":"Package Description Version License <code>anybadge</code> Simple, flexible badge generator for project badges. 1.16.0 n.a. <code>anyio</code> High level compatibility layer for multiple asynchronous event loop implementations 4.9.0 MIT <code>appdirs</code> A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". 1.4.4 MIT <code>atomicwrites</code> Atomic file writes. 1.4.1 MIT <code>attrs</code> Classes Without Boilerplate 25.3.0 n.a. <code>babel</code> Internationalization utilities 2.17.0 BSD-3-Clause <code>backrefs</code> A wrapper around re and regex that adds additional back references. 5.9 n.a. <code>certifi</code> Python package for providing Mozilla's CA Bundle. 2025.7.14 MPL-2.0 <code>cfgv</code> Validate configuration and produce human readable error messages. 3.4.0 MIT <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. 3.4.2 MIT <code>click</code> Composable command line interface toolkit 8.2.1 n.a. <code>colorama</code> Cross-platform colored terminal text. 0.4.6 n.a. <code>coverage</code> Code coverage measurement for Python 6.5.0 Apache 2.0 <code>devapps</code> Apps - End to End. 2025.8.7 BSD <code>diagrams</code> Diagram as Code 0.24.4 MIT <code>distlib</code> Distribution utilities 0.4.0 PSF-2.0 <code>docutools</code> Documentation Tools for the Mkdocs Material Framework 2025.8.3 n.a. <code>exceptiongroup</code> Backport of PEP 654 (exception groups) 1.3.0 n.a. <code>execnet</code> execnet: rapid multi-Python deployment 2.1.1 n.a. <code>filelock</code> A platform independent file lock. 3.18.0 n.a. <code>ghp-import</code> Copy your docs directly to the gh-pages branch. 2.1.0 Apache Software <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. 2.5.3 ISC <code>graphviz</code> Simple Python interface for Graphviz 0.20.3 MIT <code>h11</code> A pure-Python, bring-your-own-I/O implementation of HTTP/1.1 0.16.0 MIT <code>hjson</code> Hjson, a user interface for JSON. 3.1.0 MIT <code>httpcore</code> A minimal low-level HTTP client. 1.0.9 n.a. <code>httpx</code> The next generation HTTP client. 0.28.1 BSD-3-Clause <code>identify</code> File identification library for Python 2.6.12 MIT <code>idna</code> Internationalized Domain Names in Applications (IDNA) 3.10 n.a. <code>imagesize</code> Getting image size from png/jpeg/jpeg2000/gif file 1.4.1 MIT <code>importlib-metadata</code> Read metadata from Python packages 8.7.0 n.a. <code>iniconfig</code> brain-dead simple config-ini parsing 2.1.0 n.a. <code>Jinja2</code> A very fast and expressive template engine. 3.1.6 n.a. <code>Markdown</code> Python implementation of John Gruber's Markdown. 3.8.2 n.a. <code>markdown-include</code> A Python-Markdown extension which provides an 'include' function 0.8.1 GNU General Public  v3 (GPLv3) <code>markdown-it-py</code> Python port of markdown-it. Markdown parsing, done right! 3.0.0 n.a. <code>MarkupSafe</code> Safely add untrusted strings to HTML/XML markup. 2.0.1 BSD-3-Clause <code>mdurl</code> Markdown URL utilities 0.1.2 n.a. <code>mergedeep</code> A deep merge function for \ud83d\udc0d. 1.3.4 n.a. <code>mkdocs</code> Project documentation with Markdown. 1.6.1 n.a. <code>mkdocs-exclude</code> A mkdocs plugin that lets you exclude files or trees. 1.0.2 Apache <code>mkdocs-get-deps</code> MkDocs extension that lists all dependencies according to a mkdocs.yml file 0.2.0 n.a. <code>mkdocs-macros-plugin</code> Unleash the power of MkDocs with macros and variables 1.3.7 MIT <code>mkdocs-material</code> Documentation that simply works 9.6.16 n.a. <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. 1.3.1 n.a. <code>mkdocs-pymdownx-material-extras</code> Plugin to extend MkDocs Material theme. 2.8 n.a. <code>mypy</code> Optional static typing for Python 1.17.0 MIT <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. 1.1.0 n.a. <code>nodeenv</code> Node.js virtual environment builder 1.9.1 BSD <code>packaging</code> Core utilities for Python packages 25.0 n.a. <code>paginate</code> Divides large result sets into pages for easier browsing 0.5.7 MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. 0.12.1 n.a. <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. 4.3.8 n.a. <code>pluggy</code> plugin and hook calling mechanisms for python 1.6.0 MIT <code>pre-commit</code> A framework for managing and maintaining multi-language pre-commit hooks. 4.3.0 MIT <code>py</code> library with cross-python path, ini-parsing, io, code, log facilities 1.11.0 MIT <code>Pygments</code> Pygments is a syntax highlighting package written in Python. 2.19.2 BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. 10.16.1 n.a. <code>pyright</code> Command line wrapper for pyright 1.1.403 MIT <code>pytest</code> pytest: simple powerful testing with Python 6.2.5 MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. 2.12.1 MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. 3.16.0 n.a. <code>pytest-sugar</code> pytest-sugar is a plugin for pytest that changes the default look and feel of pytest (e.g. progressbar, show tests that fail instantly). 1.0.0 BSD <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs 3.5.0 MIT <code>python-dateutil</code> Extensions to the standard Python datetime module 2.9.0.post0 Dual <code>PyYAML</code> YAML parser and emitter for Python 6.0.2 MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. 1.1 n.a. <code>semver</code> Python helper for Semantic Versioning (https://semver.org) 3.0.4 Copyright (c) 2013, Konstantine Rybnikov All rights reserved. <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <p>Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.</p> <p>Redistributions in binary form must reproduce the above copyright notice, this   list of conditions and the following disclaimer in the documentation and/or   other materials provided with the distribution.</p> <p>Neither the name of the python-semver org nor the names of its   contributors may be used to endorse or promote products derived from   this software without specific prior written permission.</p> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>|<code>six</code>|Python 2 and 3 compatibility utilities |1.17.0|MIT |<code>sniffio</code>|Sniff out which async library your code is running under |1.3.1|MIT OR Apache-2.0 |<code>super-collections</code>|file: README.md |0.5.3|MIT   Copyright (c) 2024 Laurent Franceschetti  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sub, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. |<code>termcolor</code>|ANSI color formatting for output in terminal |3.1.0|n.a. |<code>tomli</code>|A lil' TOML parser |2.2.1|n.a. |<code>typing-extensions</code>|Backported and Experimental Type Hints for Python 3.9+ |4.14.1|n.a. |<code>urllib3</code>|HTTP library with thread-safe connection pooling, file post, and more. |2.5.0|n.a. |<code>virtualenv</code>|Virtual Python Environment builder |20.32.0|n.a. |<code>watchdog</code>|Filesystem events monitoring |6.0.0|Apache-2.0 |<code>zipp</code>|Backport of pathlib-compatible object wrapper for zip files |3.23.0|n.a.</p> <p>Many thanks to all authors, for all these brilliant software packages!</p>"},{"location":"about/todo/","title":"Not Yet Documented","text":"<p>Basically all. =&gt; Do it.</p> <ul> <li>async model (how to bypass gevent in an app see mkdocsstr)</li> <li>flags /env overrides / pytest</li> </ul>"},{"location":"arch/project/","title":"Creating Products and Projects Using Devapps","text":"<p>Build tool is poetry </p>"},{"location":"arch/project/#scaffolding","title":"Scaffolding","text":"<p>We offer a product scaffolding set of templates, installing the basic layout of a devapps project:</p> <ol> <li>Install <code>copier</code>.</li> <li>Clone  https://github.com/pawamoy/copier-poetry.git to get the templates.</li> <li>Run <code>copier copier-poetry &lt;your new product (or project)&gt;</code> </li> <li>Adapt the files to your liking</li> </ol> <p>Note</p> <p>In contrast to other scaffolding tools like cookiecutter copier does allow updates, when the templates update.</p>"},{"location":"arch/project/#makefile","title":"Makefile","text":"<p>The makefile allows various dev related actions. For most actions it calls <code>duties.py</code>, which uses poetry to run actions.</p> <p><code>make setup</code> installs a virtual environment, based on your <code>pyproject.toml</code>.</p>"},{"location":"arch/project/#products-involving-node-red","title":"Products involving Node-RED","text":"<p>Instead of raw <code>devapps</code> configure <code>lc-python</code> as main dependency within your pyproject.toml. It comes additionally with python and javascript modules and tools for handling Nodejs / Node-RED.</p>"},{"location":"arch/project/#developping-on-many-repos-concurrently","title":"Developping on Many Repos Concurrently","text":"<p>A devapps project or product repo may directly or indirectly depend on other repos of the devapps familiy. </p> <ul> <li><code>lc-doctools</code>: (Auto-)documentation building tools</li> <li><code>devapps</code>: This repo</li> <li><code>lc-python</code>: For Python reference implementation of Node-RED based data pipeline building.</li> </ul> <p>Plus, on a project, your product devapps base repo.</p> <p>In order to develop on many of them we recommend using PYTHONPATH like shown for the lc-diameter product:</p> <pre><code>$ alias lcd\nalias lcd='r=\"$HOME/repos\"; export PYTHONPATH=\"$r/devapps/src:$r/lc-doctools/src:$r/lc-python/src\"; cd \"$r/lc-diameter\"; poetry shell'\n</code></pre> <p>Now we can develop on any of the involved repos while also working on lc-diameter.</p> <p>Once all tests are running we create new package versions and bump the version number in <code>pyproject.toml</code>.</p>"},{"location":"dev/flags/","title":"The CLI Flag System","text":"<p><code>devapps</code> uses absl flags to get configured via the CLI or environ.</p> <p>Application modules and packages define the flags they require or support within their source code themselves.</p> <p>Dependent on which of these modules are imported at a certain time after startup (before the call to <code>app.run</code>), then these are the flags presented to the user when he calls <code>-h|--help|--helpful|-hf</code>. </p> <p>Set flag values are then globals throughout the application.</p> <p>This makes a lot of sense when a package has a lot of varying use cases, with certain modules sometimes needed or not.</p> <p>Note</p> <p>It is allowed to do <code>FLG.foo=bar</code> after startup - but considered bad practice.</p>"},{"location":"dev/flags/#flag-definitions-via-nested-class-trees","title":"Flag Definitions via Nested Class Trees","text":"<p>In devapps, while fully supporting the standard absl mechanics (<code>flags.DEFINE_string</code>) we also allow to defined them in class name spaces:</p> <p>These are e.g. the flags of the <code>project</code> module:</p> <pre><code>from devapp.app import FLG, app, run_app, do, system\n\nclass Flags:\n    # short codes built dynamically (conflict resolved) for all flags:\n    autoshort = '' # You could give a short code prefix here\n\n    # flag name:\n    class force:\n        # CLI help string:\n        n = 'Assume y on all questions. Required when started w/o a tty'\n        d = False # default\n\n    class init_at:\n        n = 'Set up project in given directory. env vars / relative dirs supported.'\n        d = ''\n\n    class init_create_unit_files:\n        n = 'List service unit files you want to have created for systemctl --user'\n        d = []\n\n    class init_resource_match:\n        n = 'Install only matching resources. Example: -irm \"redis, hub\"'\n        d = []\n\n    class list_resources_files:\n        n = 'Show available definition files.'\n        d = False\n\n    class edit_matching_resource_file:\n        n = 'Open resource files in $EDITOR, matching given string in their content'\n        d = ''\n\n    (...)\n\ndef run():\n    if FLG.init_at:\n        # structlog call:\n        app.info('Re-initializing project', location=FLG.init_at)\n        (...)\n\n# if flags argument to run_app is given it will implicitly call devapp.tools.define_flags:\nmain = lambda: run_app(run, flags=Flags)\n</code></pre> <p>Full Control</p> <p>module import does not cause flags already to be defined, the parent class is just a namespace without any magic.</p> <p>Instead there is special call <code>devapp.tools.define_flags(my_flags_class)</code>, which calls <code>absl.define_&lt;type&gt;</code> for any of the inner classes.   </p> <p>Handing the flags via the flags argument into <code>run_app</code> will issue that call.</p> <p>A call to help then lists the flags on the CLI:</p> <code>-h</code>: Module Help <p>This lists the supported flags for the module whose main method is called:</p> <p> </p> <pre><code>$ ops project -h\n\n\u001b[1;38;5;11mCreating A Project With Resources\n\u001b[1;38;5;11m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u001b[0m\nThis plugin is helper for creating a project directory, incl. required local\nresources. Your system remains unchanged, except &lt;project_dir&gt; and\n&lt;conda_prefix&gt;.\n\u001b[0m\nIt provides an \u001b[0;38;5;5minstall\u001b[0m action (implicitely by providing the\n--init_resource_match or --init_at switch)\n\u001b[0m\nDefault action is: \u001b[0;38;5;5mlist\u001b[0m (show installable resources, -m &lt;match&gt; filters).\n\u001b[0m\nAt install we will (re-)initialize a \"project_dir\", at location given with\n--init_at (default: '.'), incl:\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mInstalling available resources, like databases and tools within a given\n  directory (conda_prefix)\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mCreating resource start wrappers in &lt;project_dir&gt;/bin\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mGenerating default config when required\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mOptionally generating systemd unit files (e.g. via: --init_create_all_units)\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mInstances support: export &lt;name&gt;_instances=x before running and you'll get x\n  systemd units created, for startable commands.\n\u001b[0;38;5;5m\n\u001b[0;38;5;5m  \u001b[0;38;5;5mExample: export client_instances=10; ops p -irm client -icau\n\u001b[0;38;5;5m  \u001b[0;38;5;5m(Name of a resource: ops p [-m &lt;match&gt;])\u001b[0m\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mAny other parametrization: Via environ variables Check key environ vars in\n  list output and also doc text.\n\u001b[0m\nPrivilege escalation is not required for any of these steps.\n\u001b[0m\n\nMain command line flags [matching \u001b[1;32mops_devapp.project\u001b[0m]:\n\u001b[0;32mappc    \u001b[1;33madd_post_process_cmd     \u001b[0;31m''\u001b[0;38;5;245m\nAdd this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty.\nExample: -appc='2&gt;&amp;1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -&gt; use single quotes).\nTip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \n\u001b[0;32mcp      \u001b[1;33mconda_prefix             \u001b[0;31m/home/runner/micromamba\u001b[0;38;5;245m\n\n    Resources install location, except filesystem based ones. Env vars resolved.\n\n    Aliases:\n    - local|l: &lt;project_dir&gt;/conda\n    - default|d: $HOME/miniconda3 (default path of conda)\n    - current|c: Any current conda_prefix set when running.\n\n    Note: Installing resources outside the project keeps the project relocatable and resources reusable for other products.\n\n\u001b[0;32mcsu     \u001b[1;33mcreate_system_units      \u001b[0;31mFalse\u001b[0;38;5;245m\nInstead of user unit files, create system files, in /etc/systemd/system. Implies -icau. \ud83d\udfe5 A sudo password is required! \n\u001b[0;32mdamsu   \u001b[1;33mdelete_all_matching_service_unit_files \u001b[0;31m''\u001b[0;38;5;245m\nThis removes all matching unit files calling devapp service wrappers. Say \"service\" to match all \n\u001b[0;32mdi      \u001b[1;33mdev_install              \u001b[0;31mFalse\u001b[0;38;5;245m\nSet the project up in developer mode - incl. make and poetry file machinery \n\u001b[0;32memrf    \u001b[1;33medit_matching_resource_file \u001b[0;31m''\u001b[0;38;5;245m\nOpen resource files in $EDITOR, matching given string in their content \n\u001b[0;32mf       \u001b[1;33mforce                    \u001b[0;31mFalse\u001b[0;38;5;245m\nAssume y on all questions. Required when started w/o a tty \n\u001b[0;32mfr      \u001b[1;33mforce_reinstall          \u001b[0;31mFalse\u001b[0;38;5;245m\nDo not only install resources detected uninstalled but reinstall all \n\u001b[0;32mfd      \u001b[1;33mfs_dir                   \u001b[0;31mdefault\u001b[0;38;5;245m\n\n    Filesystem based resource location. Env vars resolved.\n    Aliases:\n    - local|l: &lt;project_dir&gt;/fs\n    - default|d: $HOME/miniconda3/fs (default path of conda)\n    - conda|c: Within conda_prefix/fs\n\n\u001b[0;32mia      \u001b[1;33minit_at                  \u001b[0;31m''\u001b[0;38;5;245m\nSet up project in given directory. env vars / relative dirs supported. Sets install action implicitly \n\u001b[0;32micau    \u001b[1;33minit_create_all_units    \u001b[0;31mFalse\u001b[0;38;5;245m\nIf set we create (user) unit files for service type resources \n\u001b[0;32micuf    \u001b[1;33minit_create_unit_files   \u001b[0;31m''\u001b[0;38;5;245m\nList service unit files you want to have created for systemctl --user.  \u001b[0;38;5;241m\nValid: Entries in rsc.provides, rsc.cmd or rsc.exe (i.e. the filename of the wrapper in bin dir). Not: rsc.name.\n\u001b[0;32mirm     \u001b[1;33minit_resource_match      \u001b[0;31m''\u001b[0;38;5;245m\nLike resource match but implies install action \n\u001b[0;32mi       \u001b[1;33minstall                  \u001b[0;33mACTION\u001b[0;38;5;245m\nInstall \n\u001b[0;32mis      \u001b[1;33minstall_state            \u001b[0;31mFalse\u001b[0;38;5;245m\nshow install state infos \n\u001b[0;32ml       \u001b[1;33mlist                     \u001b[1;33mACTION*\u001b[0;38;5;245m\nShow available definition files. \n\u001b[0;32mlrf     \u001b[1;33mlist_resources_files     \u001b[0;33mACTION\u001b[0;38;5;245m\nAlias for list action \n\u001b[0;32mloref   \u001b[1;33mlog_resources_fully      \u001b[0;31mFalse\u001b[0;38;5;245m\nAlways output all settings of resources when logging \n\u001b[0;32mm       \u001b[1;33mresource_match           \u001b[0;31m''\u001b[0;38;5;245m\nProvide a match string for actions. Examples: -irm \"redis, hub\" or -irm '!mysql, !redis' (! negates).\n\n\u001b[36m-hf [match string]\u001b[0m: List \u001b[36;1mALL\u001b[0m (matching) flags. E.g. -hf or -hf log.\n\u001b[0m\n</code></pre> <code>-hf</code>: All Flags <p><code>-hf &lt;match&gt;</code> gives help for ALL flags imported, here with a match:</p> <p> </p> <pre><code>$ ops project -hf log | grep -A 100 'All supported'\nAll supported command line flags [matching \u001b[1;32mlog\u001b[0m]:\n\u001b[1;34mabsl.logging\n\u001b[0;32m        \u001b[1;33malsologtostderr          \u001b[0;31mFalse\u001b[0;38;5;245m\nalso log to stderr? \n\u001b[0;32m        \u001b[1;33mlog_dir                  \u001b[0;31m''\u001b[0;38;5;245m\ndirectory to write logfiles into \n\u001b[0;32m        \u001b[1;33mlogger_levels            \u001b[0;31m''\u001b[0;38;5;245m\nSpecify log level of loggers. The format is a CSV list of `name:level`. Where `name` is the logger name used with `logging.getLogger()`, and `level` is a level name  (INFO, DEBUG, etc). e.g. `myapp.foo:INFO,other.logger:DEBUG` \n\u001b[0;32m        \u001b[1;33mlogtostderr              \u001b[0;31mFalse\u001b[0;38;5;245m\nShould only log to stderr? \n\u001b[0;32m        \u001b[1;33mshowprefixforinfo        \u001b[0;31mTrue\u001b[0;38;5;245m\nIf False, do not prepend prefix to info messages when it's logged to stderr, --verbosity is set to INFO level, and python logging is used. \n\u001b[0;32m        \u001b[1;33mstderrthreshold          \u001b[0;31mfatal\u001b[0;38;5;245m\nlog messages at this level, or more severe, to stderr in addition to the logfile.  Possible values are 'debug', 'info', 'warning', 'error', and 'fatal'.  Obsoletes --alsologtostderr. Using --alsologtostderr cancels the effect of this flag. Please also note that this flag is subject to --verbosity and requires logfile not be stderr. \n\u001b[0;32mv       \u001b[1;33mverbosity                \u001b[0;31m-1\u001b[0;38;5;245m\nLogging verbosity level. Messages logged at this level or lower will be included. Set to 1 for debug logging. If the flag was not set or supplied, the value will be changed from the default of -1 (warning) to 0 (info) after flags are parsed. \n\u001b[1;34mdevapp.tools\n\u001b[0;32mdasdi   \u001b[1;33msensitive_data_identifiers \u001b[0;31mpass.*|.*secret.*\u001b[0;38;5;245m\nRegexp which helps identify keys carrying sensitive information (for filtering out of logs). Case insensitive matching. \n\u001b[1;34mstructlogging.sl\n\u001b[0;32mlatn    \u001b[1;33mlog_add_thread_name      \u001b[0;31mFalse\u001b[0;38;5;245m\nAdd name of thread \n\u001b[0;32mldcnt   \u001b[1;33mlog_dev_coljson_no_truecolor \u001b[0;31mFalse\u001b[0;38;5;245m\nNOT use true color for styles (e.g. when no terminal support) \n\u001b[0;32mldcs    \u001b[1;33mlog_dev_coljson_style    \u001b[0;31mdark\u001b[0;38;5;245m\n Pygments style for colorized json. To use the 16 base colors and leave it to the terminal palette how to render: Choose light or dark &lt;abap|algol|algol_nu|arduino|autumn|ax|borland|bw|coffee|colorful|dark|default|dracula|emacs|friendly|friendly_grayscale|fruity|github-dark|gruvbox-dark|gruvbox-light|igor|inkpot|light|lightbulb|lilypond|lovelace|manni|material|monokai|murphy|native|nord|nord-darker|one-dark|paraiso-dark|paraiso-light|pastie|perldoc|rainbow_dash|rrt|sas|solarized-dark|solarized-light|staroffice|stata-dark|stata-light|tango|trac|vim|vs|xcode|zenburn&gt;\n\u001b[0;32mlddnm   \u001b[1;33mlog_dev_dimm_no_match    \u001b[0;31mFalse\u001b[0;38;5;245m\nDimm not matching lines (in colored output only) \n\u001b[0;32mldfc    \u001b[1;33mlog_dev_fmt_coljson      \u001b[0;31mjson,payload\u001b[0;38;5;245m\nList of keys to log as json. \n\u001b[0;32mldm     \u001b[1;33mlog_dev_match            \u001b[0;31m''\u001b[0;38;5;245m\nRegex to search in loglines - will be highlighted. \n\u001b[0;32mlf      \u001b[1;33mlog_fmt                  \u001b[0;31mauto\u001b[0;38;5;245m\nForce a log format. 0: off, 1: auto, 2: plain, 3: plain_no_colors, 4: json.   \u001b[0;38;5;241m\n\ud83d\udfe2 Json logging has far better performance then the colored console dev log.\nYou can pipe e.g. journalctl output into \"ops log_view -fn -\" to get dev logging from json.\n\nThis value can be set away from auto via export log_fmt as well.\n\u001b[0;32mll      \u001b[1;33mlog_level                \u001b[0;31m20\u001b[0;38;5;245m\nLog level (10: debug, 20: info, ...). You may also say log_level=error \n\u001b[0;32mlsf     \u001b[1;33mlog_stack_filter         \u001b[0;31mfn not contains frozen and fn not contains /rx/\u001b[0;38;5;245m\nWhen logging error tracebacks this is an optional filter. Keywords:fn: filename, frame: frame nr, line: line nr, name: name of callable  \u001b[0;38;5;241m\nExample: fn contains project and frame lt 1 (axiros/pycond expression)\n\u001b[0;32mlsmf    \u001b[1;33mlog_stack_max_frames     \u001b[0;31m3\u001b[0;38;5;245m\nMaximum Frames Shown in Terminal Stack Traces \n\u001b[0;32mltln    \u001b[1;33mlog_thread_local_names   \u001b[0;31mFalse\u001b[0;38;5;245m\nPrefer thread local logger_name, when set \n\u001b[0;32mltf     \u001b[1;33mlog_time_fmt             \u001b[0;31m%m-%d %H:%M:%S\u001b[0;38;5;245m\nLog time format. Shortcuts: \"ISO\", \"dt\" \n\u001b[0;32mlts     \u001b[1;33mlog_to_stdout            \u001b[0;31mFalse\u001b[0;38;5;245m\nDefault: stderr \n\u001b[1;34mops_devapp.project\n\u001b[0;32mappc    \u001b[1;33madd_post_process_cmd     \u001b[0;31m''\u001b[0;38;5;245m\nAdd this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty.\nExample: -appc='2&gt;&amp;1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -&gt; use single quotes).\nTip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \n\u001b[0;32mloref   \u001b[1;33mlog_resources_fully      \u001b[0;31mFalse\u001b[0;38;5;245m\nAlways output all settings of resources when logging \n\u001b[0m\n</code></pre>"},{"location":"dev/flags/#flag-types","title":"Flag Types","text":"<pre><code>$ cat /tmp/flagtest.py\n#!/usr/bin/env python\nfrom devapp.app import app, run_app, FLG\n\nclass Flags:\n    autoshort = '' # enabling short forms, prefixed with '', i.e. not prefixed\n\n    class my_bool:\n        d = False\n\n    class my_float:\n        d = 1.1\n\n    class my_int:\n        d = 1\n\n    class my_multi_str:\n        t = 'multi_string'  # can supply more than once, any value\n\n    class my_list:\n        s = 'x'   # non auto short form\n        t = list  # comma sepped values into a list \n        d =  'foo, bar'\n\n    class my_opt:\n        t = ['foo', 'bar']  # can pick exactly one within the list (enum)\n        d =  'foo'\n\n    class my_opt_multi:\n        t = ('a', 'b', 'c') # now we can select more than one within the tuple (multi_enum)\n        d =  'a'\n\n    class my_str:\n        d = 'foo' # most easy way\n\n    class my_str_detailed:\n        '''Detailed help'''\n        n = '''Options (multiline help)\n        - opt1: foo\n        - opt2: bar\n        '''\n        s = False # disable short\n        d = 'opt1'\n\n    class my_condition:\n        # will be parsed into an axiros/pycond filter, incl. the condition (list).\n        t = 'pycond'\n        d = 'fn not contains frozen and fn not contains /rx/'\n\n\n# Print out all FLG vals.\n# Normal (global) app access e.g. like : if FLG.my_int &gt; 42:\nflg = lambda: [(k, getattr(FLG, k)) for k in FLG if k.startswith('my_')]\nrun = lambda: app.info('Flag values (CLI over defaults):', json=flg())\n\nif __name__ == '__main__':\n    # supplying the flags keyword implicitly calls devapp.tools.define_flags on them:\n    run_app(run, flags=Flags)\n</code></pre> <p>With this</p> <p></p> <pre><code>$ /tmp/flagtest.py -h\n\u001b[1;34mflagtest.py\n\u001b[0;32mmb    \u001b[1;33mmy_bool         \u001b[0;31mFalse       \u001b[0;38;5;245mMy_bool                                       \n\u001b[0;32mmc    \u001b[1;33mmy_condition    \u001b[0;31mfn not..    \u001b[0;38;5;245mMy_condition (axiros/pycond expression)       \n\u001b[0;32mmf    \u001b[1;33mmy_float        \u001b[0;31m1.1         \u001b[0;38;5;245mMy_float                                      \n\u001b[0;32mmi    \u001b[1;33mmy_int          \u001b[0;31m1           \u001b[0;38;5;245mMy_int                                        \n\u001b[0;32mx     \u001b[1;33mmy_list         \u001b[0;31mfoo,bar     \u001b[0;38;5;245mMy_list                                       \n\u001b[0;32mmms   \u001b[1;33mmy_multi_str    \u001b[0;31m['']        \u001b[0;38;5;245mMy_multi_str; repeat this option to specify.. \n\u001b[0;32mmo    \u001b[1;33mmy_opt          \u001b[0;31mfoo         \u001b[0;38;5;245m My_opt&lt;foo|bar&gt;                              \n\u001b[0;32mmom   \u001b[1;33mmy_opt_multi    \u001b[0;31m['a']       \u001b[0;38;5;245mMy_opt_multi; repeat this option to specify.. \n\u001b[0;32mms    \u001b[1;33mmy_str          \u001b[0;31mfoo         \u001b[0;38;5;245mMy_str                                        \n\u001b[0;32m      \u001b[1;33mmy_str_detailed \u001b[0;31mopt1        \u001b[0;38;5;245mOptions (multiline help) - opt1: foo - opt2:..\n\n\u001b[36m-hf [match string]\u001b[0m: List \u001b[36;1mALL\u001b[0m (matching) flags. E.g. -hf or -hf log.\n\u001b[0m\n$ /tmp/flagtest.py -mo baz || true\nFATAL Flags parsing error: flag --my_opt=baz: value should be one of &lt;foo|bar&gt;\nPass --helpshort or --helpfull to see help on flags.\n$ /tmp/flagtest.py -ms a -mb -mf 42.1 -mi 42 -mms a -mms b -mo bar -mom b -mom c -x a,b -ms b -lf plain\n\u001b[2;38;5;5m08-15 09:41:58 [\u001b[38;5;4minfo     ] \u001b[0mFlag values (CLI over defaults): [\u001b[38;5;5mflagtest\u001b[0m] \u001b[1;38;5;1mjson=\u001b[2;38;5;5m\u001b[0m[\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"my_list\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m      \u001b[39;49;00m\u001b[33m\"a\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m      \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"my_bool\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[94mtrue\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"my_condition\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m      \u001b[39;49;00m\u001b[33m\"&lt;function build_pycond_flag_expr.&lt;locals&gt;.&lt;lambda&gt; at 0x7f2823b00e50&gt;\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m      \u001b[39;49;00m\u001b[33m\"fn not contains frozen and fn not contains /rx/\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"my_float\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[94m42.1\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"my_int\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[94m42\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"my_multi_str\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m      \u001b[39;49;00m\u001b[33m\"a\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m      \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"my_opt\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"bar\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"my_opt_multi\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m      \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m      \u001b[39;49;00m\u001b[33m\"c\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"my_str\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"my_str_detailed\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m\n\u001b[90m    \u001b[39;49;00m\u001b[33m\"opt1\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\u001b[90m  \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m\n]\u001b[90m\u001b[39;49;00m\n\u001b[0m\n</code></pre> <p>Hint</p> <p>Note <code>my_str</code> defined twice in the example - last wins (except when defined <code>multi_string</code>) -&gt; you can preparametrize apps in wrappers and still overwrite flags when calling the wrapper.</p> <p>E.g. in the wrapper you have -ll 20 while in the call you say -ll 10 to have debug logging for a certain run.  </p>"},{"location":"dev/flags/#environ-flags","title":"Environ Flags","text":"<p>Adding <code>--environ_flags</code> causes the app to check the process environ first(!), for any flag value.</p> Setting project directory and log level via environ <p> </p> <pre><code>$ export init_at=\"$HOME/foo\"; export log_level=30\n$\n$ ops project -ia /tmp --environ_flags\n\n\u001b[31m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u001b[1mTraceback \u001b[2m(most recent call last)\u001b[0m\u001b[31m \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502\u001b[39m \u001b[2m/home/runner/work/devapps/devapps/src/devapp/\u001b[0;1mapp.py\u001b[0m:572 in run_phase_2       \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m569 \u2502   \u2502   \u2502   # main = lambda: run_app(Action, flags=Flags, wrapper=clea\u001b[0m \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m570 \u2502   \u2502   \u2502   \u001b[0m\u001b[94mif\u001b[39m FLG.dirwatch:                                           \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m571 \u2502   \u2502   \u2502   \u2502   \u001b[0msignal.signal(reload_signal, reload_handler)           \u001b[31m\u2502\n\u2502\u001b[39m \u001b[31m\u2771 \u001b[39m572 \u001b[2m\u2502   \u2502   \u2502   \u001b[0mres = wrapper(main) \u001b[94mif\u001b[39m wrapper \u001b[94melse\u001b[39m main()                 \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m573 \u2502   \u2502   \u2502   \u001b[0m\u001b[94mif\u001b[39m FLG.dirwatch:                                           \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m574 \u2502   \u2502   \u2502   \u2502   \u001b[0mapp.info(\u001b[33m'Keep running, dirwatch is set'\u001b[39m)              \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m575 \u2502   \u2502   \u2502   \u2502   \u001b[0m\u001b[94mwhile\u001b[39m \u001b[94m1\u001b[39m:                                               \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m            \u001b[3m\u001b[33margs\u001b[0m\u001b[31m =\u001b[39m \u001b[1m[\u001b[0m                                                      \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   \u001b[2m\u001b[32m\u2502   \u001b[0m\u001b[32m'/home/runner/work/devapps/devapps/.venv/bin/ops'\u001b[39m, \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   \u001b[2m\u001b[32m\u2502   \u001b[0m\u001b[32m'project'\u001b[39m                                          \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   \u001b[1m]\u001b[0m                                                      \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m              \u001b[3m\u001b[33mex\u001b[0m\u001b[31m =\u001b[39m \u001b[1m\u001b[35mDieNow\u001b[39m(\u001b[0m\u001b[32m'Not exists'\u001b[39m, \u001b[1m{\u001b[0m\u001b[32m'dir'\u001b[39m: \u001b[32m'/home/runner/foo'\u001b[1m\u001b[39m})\u001b[0m      \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m \u001b[3m\u001b[33mflags_validator\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[35mNone\u001b[0m                                                   \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m          \u001b[3m\u001b[33mkw_log\u001b[0m\u001b[31m =\u001b[39m \u001b[1m{}\u001b[0m                                                     \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m             \u001b[3m\u001b[33mlog\u001b[0m\u001b[31m =\u001b[39m \u001b[1m&lt;\u001b[35mAXLogger\u001b[39m(\u001b[0m\u001b[33mcontext\u001b[39m=\u001b[1m{}\u001b[0m, \u001b[33mprocessors\u001b[39m=\u001b[1m[\u001b[0m&lt;function            \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   filter_by_level at \u001b[1m\u001b[36m0x7fe9043043a0\u001b[0m&gt;,                    \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   &lt;structlog.processors.TimeStamper object at            \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   \u001b[1m\u001b[36m0x7fe90431a0c0\u001b[0m&gt;, &lt;function add_log_level at            \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   \u001b[1m\u001b[36m0x7fe904b304c0\u001b[0m&gt;, &lt;function censor_passwords at         \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   \u001b[1m\u001b[36m0x7fe904304430\u001b[0m&gt;, &lt;function add_logger_name at          \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   \u001b[1m\u001b[36m0x7fe9043044c0\u001b[0m&gt;, &lt;function                             \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   stack_info.&lt;locals&gt;._stack_info at \u001b[1m\u001b[36m0x7fe9043545e0\u001b[0m&gt;,    \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   &lt;structlogging.renderers.ThemeableConsoleRenderer      \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m                   object at \u001b[1m\u001b[36m0x7fe904327b20\u001b[0m&gt;\u001b[1m])&gt;\u001b[0m                           \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m            \u001b[3m\u001b[33mname\u001b[0m\u001b[31m =\u001b[39m \u001b[32m'project'\u001b[39m                                              \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m            \u001b[3m\u001b[33mpost\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[35mNone\u001b[0m                                                   \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m             \u001b[3m\u001b[33mres\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[35mNone\u001b[0m                                                   \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m     \u001b[3m\u001b[33mwatcher_pid\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[35mNone\u001b[0m                                                   \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m         \u001b[3m\u001b[33mwrapper\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[35mNone\u001b[0m                                                   \u001b[34m\u2502\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[2m/home/runner/work/devapps/devapps/src/devapp/plugins/ops_devapp/project/\u001b[0;1m__in\u001b[0m \u001b[31m\u2502\n\u2502\u001b[39m \u001b[1mit__.py\u001b[0m:308 in run                                                           \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m305 \u2502   \u001b[0md = os.path.abspath(d)                                             \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m306 \u2502   \u001b[0md = d[:-\u001b[94m1\u001b[39m] \u001b[94mif\u001b[39m d.endswith(\u001b[33m'/'\u001b[39m) \u001b[94melse\u001b[39m d                               \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m307 \u2502   \u001b[0m\u001b[94mif\u001b[39m \u001b[95mnot\u001b[39m exists(d):                                                  \u001b[31m\u2502\n\u2502\u001b[39m \u001b[31m\u2771 \u001b[39m308 \u001b[2m\u2502   \u2502   \u001b[0mapp.die(\u001b[33m'Not exists'\u001b[39m, \u001b[96mdir\u001b[39m=d)                                   \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m309 \u2502   \u001b[0mdo(os.chdir, d)                                                    \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m310 \u2502   \u001b[0md = FLG.init_at = os.path.abspath(\u001b[33m'.'\u001b[39m)                             \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m311 \u2502   \u001b[0mproject.set_project_dir(\u001b[96mdir\u001b[39m=d)                                     \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m                                                   \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m \u001b[3m\u001b[33md\u001b[0m\u001b[31m =\u001b[39m \u001b[32m'/home/runner/foo'\u001b[39m \u001b[34m\u2502\u001b[39m                                                   \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m \u001b[3m\u001b[33mm\u001b[0m\u001b[31m =\u001b[39m \u001b[32m''\u001b[39m                 \u001b[34m\u2502\u001b[39m                                                   \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m                                                   \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[2m/home/runner/work/devapps/devapps/src/devapp/\u001b[0;1mapp.py\u001b[0m:175 in die               \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m172 \u2502   \u2502   \u001b[0m\u001b[94mif\u001b[39m silent:                                                     \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m173 \u2502   \u2502   \u2502   \u001b[0mapp.fatal(msg, **kw)                                       \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m174 \u2502   \u2502   \u2502   \u001b[0msys.exit(\u001b[94m1\u001b[39m)                                                \u001b[31m\u2502\n\u2502\u001b[39m \u001b[31m\u2771 \u001b[39m175 \u001b[2m\u2502   \u2502   \u001b[0m\u001b[94mraise\u001b[39m DieNow(msg, kw)                                          \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m176 \u2502   \u001b[0m                                                                   \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m177 \u2502   \u001b[0mapp.die = die                                                      \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m178 \u2502   \u001b[0mapp.name = name                                                    \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m                                     \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m     \u001b[3m\u001b[33mkw\u001b[0m\u001b[31m =\u001b[39m \u001b[1m{\u001b[0m\u001b[32m'dir'\u001b[39m: \u001b[32m'/home/runner/foo'\u001b[1m\u001b[39m}\u001b[0m \u001b[34m\u2502\u001b[39m                                     \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m    \u001b[3m\u001b[33mmsg\u001b[0m\u001b[31m =\u001b[39m \u001b[32m'Not exists'\u001b[39m                \u001b[34m\u2502\u001b[39m                                     \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m \u001b[3m\u001b[33msilent\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[91mFalse\u001b[0m                       \u001b[34m\u2502\u001b[39m                                     \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m                                     \u001b[31m\u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u001b[1m\u001b[91mDieNow: \u001b[39m(\u001b[0m\u001b[32m'Not exists'\u001b[39m, \u001b[1m{\u001b[0m\u001b[32m'dir'\u001b[39m: \u001b[32m'/home/runner/foo'\u001b[1m\u001b[39m})\n\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:04 [\u001b[1m\u001b[38;5;124merror    ] \u001b[0mNot exists                     [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mdir=\u001b[2m\u001b[38;5;5m/home/runner/foo\n\u001b[0m$\n</code></pre> <p>Environ over CLI</p> <p>Please note again that the environ value does overwrite the CLI value, when <code>environ_flags</code> is explicitly set. On the cli, you'd have to use the <code>unset</code> command first.</p>"},{"location":"dev/flags/#flagsets","title":"Flagsets","text":"<p>You can store full sets of flags in files and refer to them via the absl standard <code>--flagfile=....</code> flag.</p>"},{"location":"dev/flags/#using-flags-in-pytest","title":"Using Flags in <code>pytest</code>","text":"<p>When the started process is pytest, then the <code>environ_flags</code> flag is set to true. Means you can export non default flag values before starting pytest like so:</p> <pre><code>export my_flag=myval &amp;&amp; pytest -xs test/test_my_test.py\n</code></pre>"},{"location":"dev/flags/#action-flags","title":"Action Flags","text":"<p>Example:</p> <pre><code>$ cat /tmp/action_flagtest.py\n#!/usr/bin/env python\nfrom devapp.app import app, run_app, FLG\n\n\nclass Flags:\n    autoshort=''\n\n    class force:\n        d = False\n\n    class Actions:\n        class install:\n            d = False\n\n            class verbose:\n                s = 'iv' # no auto for nested flags\n                d = False\n\n        class run:\n            d = True # default\n\n\nclass ActionNS:\n    def _pre():\n        print('pre')\n\n    def _post():\n        print('post')\n\n    def run():\n        print('running', FLG.force)\n\n    def install():\n        print('installing', FLG.force, FLG.install_verbose)\n\nif __name__ == '__main__':\n    run_app(ActionNS, flags=Flags)\n</code></pre> <p>Test it:</p> <p></p> <pre><code>$ /tmp/action_flagtest.py -h\n\u001b[1;34maction_flagtest.py\n\u001b[0;32mf     \u001b[1;33mforce           \u001b[0;31mFalse       \u001b[0;38;5;245mForce                                         \n\u001b[0;32mi     \u001b[1;33minstall         \u001b[0;33mACTION      \u001b[0;38;5;245mInstall                                       \n\u001b[0;32mr     \u001b[1;33mrun             \u001b[1;33mACTION*     \u001b[0;38;5;245mRun\n\n\u001b[36m-hf [match string]\u001b[0m: List \u001b[36;1mALL\u001b[0m (matching) flags. E.g. -hf or -hf log.\n\u001b[0m\n$ /tmp/action_flagtest.py\npre\nrunning False\npost\n$ /tmp/action_flagtest.py -f\npre\nrunning True\npost\n$ /tmp/action_flagtest.py -iv || true\nFATAL Flags parsing error: Unknown command line flag 'iv'\nPass --helpshort or --helpfull to see help on flags.\n$ /tmp/action_flagtest.py install -iv\npre\ninstalling False True\npost\n$ /tmp/action_flagtest.py install -f -iv\npre\ninstalling True True\npost\n$ /tmp/action_flagtest.py install --install_verbose\npre\ninstalling False True\npost\n$ /tmp/action_flagtest.py run --install_verbose=True || true\nFATAL Flags parsing error: Unknown command line flag 'install_verbose'\nPass --helpshort or --helpfull to see help on flags.\n</code></pre> <p>Mind the concatenation of action and flag name for the nested property verbose within <code>def install()</code> action.</p>"},{"location":"dev/logging/","title":"Logging","text":"<p>You have a rich structured logging system, backed by structlog:</p> <p>The features we show by matching the help full (-hf) output of an arbitrary app (here <code>ops project</code>) on the match string \"log\": </p> <p></p> <pre><code>$ ops project -hf log\n\n\n\u001b[1;38;5;11mCreating A Project With Resources\n\u001b[1;38;5;11m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u001b[0m\nThis plugin is helper for creating a project directory, incl. required local\nresources. Your system remains unchanged, except &lt;project_dir&gt; and\n&lt;conda_prefix&gt;.\n\u001b[0m\nIt provides an \u001b[0;38;5;5minstall\u001b[0m action (implicitely by providing the\n--init_resource_match or --init_at switch)\n\u001b[0m\nDefault action is: \u001b[0;38;5;5mlist\u001b[0m (show installable resources, -m &lt;match&gt; filters).\n\u001b[0m\nAt install we will (re-)initialize a \"project_dir\", at location given with\n--init_at (default: '.'), incl:\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mInstalling available resources, like databases and tools within a given\n  directory (conda_prefix)\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mCreating resource start wrappers in &lt;project_dir&gt;/bin\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mGenerating default config when required\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mOptionally generating systemd unit files (e.g. via: --init_create_all_units)\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mInstances support: export &lt;name&gt;_instances=x before running and you'll get x\n  systemd units created, for startable commands.\n\u001b[0;38;5;5m\n\u001b[0;38;5;5m  \u001b[0;38;5;5mExample: export client_instances=10; ops p -irm client -icau\n\u001b[0;38;5;5m  \u001b[0;38;5;5m(Name of a resource: ops p [-m &lt;match&gt;])\u001b[0m\n\u001b[0m\n\u001b[0;38;5;5m\u2756 \u001b[0mAny other parametrization: Via environ variables Check key environ vars in\n  list output and also doc text.\n\u001b[0m\nPrivilege escalation is not required for any of these steps.\n\u001b[0m\n\nAll supported command line flags [matching \u001b[1;32mlog\u001b[0m]:\n\u001b[1;34mabsl.logging\n\u001b[0;32m        \u001b[1;33malsologtostderr          \u001b[0;31mFalse\u001b[0;38;5;245m\nalso log to stderr? \n\u001b[0;32m        \u001b[1;33mlog_dir                  \u001b[0;31m''\u001b[0;38;5;245m\ndirectory to write logfiles into \n\u001b[0;32m        \u001b[1;33mlogger_levels            \u001b[0;31m''\u001b[0;38;5;245m\nSpecify log level of loggers. The format is a CSV list of `name:level`. Where `name` is the logger name used with `logging.getLogger()`, and `level` is a level name  (INFO, DEBUG, etc). e.g. `myapp.foo:INFO,other.logger:DEBUG` \n\u001b[0;32m        \u001b[1;33mlogtostderr              \u001b[0;31mFalse\u001b[0;38;5;245m\nShould only log to stderr? \n\u001b[0;32m        \u001b[1;33mshowprefixforinfo        \u001b[0;31mTrue\u001b[0;38;5;245m\nIf False, do not prepend prefix to info messages when it's logged to stderr, --verbosity is set to INFO level, and python logging is used. \n\u001b[0;32m        \u001b[1;33mstderrthreshold          \u001b[0;31mfatal\u001b[0;38;5;245m\nlog messages at this level, or more severe, to stderr in addition to the logfile.  Possible values are 'debug', 'info', 'warning', 'error', and 'fatal'.  Obsoletes --alsologtostderr. Using --alsologtostderr cancels the effect of this flag. Please also note that this flag is subject to --verbosity and requires logfile not be stderr. \n\u001b[0;32mv       \u001b[1;33mverbosity                \u001b[0;31m-1\u001b[0;38;5;245m\nLogging verbosity level. Messages logged at this level or lower will be included. Set to 1 for debug logging. If the flag was not set or supplied, the value will be changed from the default of -1 (warning) to 0 (info) after flags are parsed. \n\u001b[1;34mdevapp.tools\n\u001b[0;32mdasdi   \u001b[1;33msensitive_data_identifiers \u001b[0;31mpass.*|.*secret.*\u001b[0;38;5;245m\nRegexp which helps identify keys carrying sensitive information (for filtering out of logs). Case insensitive matching. \n\u001b[1;34mstructlogging.sl\n\u001b[0;32mlatn    \u001b[1;33mlog_add_thread_name      \u001b[0;31mFalse\u001b[0;38;5;245m\nAdd name of thread \n\u001b[0;32mldcnt   \u001b[1;33mlog_dev_coljson_no_truecolor \u001b[0;31mFalse\u001b[0;38;5;245m\nNOT use true color for styles (e.g. when no terminal support) \n\u001b[0;32mldcs    \u001b[1;33mlog_dev_coljson_style    \u001b[0;31mdark\u001b[0;38;5;245m\n Pygments style for colorized json. To use the 16 base colors and leave it to the terminal palette how to render: Choose light or dark &lt;abap|algol|algol_nu|arduino|autumn|ax|borland|bw|coffee|colorful|dark|default|dracula|emacs|friendly|friendly_grayscale|fruity|github-dark|gruvbox-dark|gruvbox-light|igor|inkpot|light|lightbulb|lilypond|lovelace|manni|material|monokai|murphy|native|nord|nord-darker|one-dark|paraiso-dark|paraiso-light|pastie|perldoc|rainbow_dash|rrt|sas|solarized-dark|solarized-light|staroffice|stata-dark|stata-light|tango|trac|vim|vs|xcode|zenburn&gt;\n\u001b[0;32mlddnm   \u001b[1;33mlog_dev_dimm_no_match    \u001b[0;31mFalse\u001b[0;38;5;245m\nDimm not matching lines (in colored output only) \n\u001b[0;32mldfc    \u001b[1;33mlog_dev_fmt_coljson      \u001b[0;31mjson,payload\u001b[0;38;5;245m\nList of keys to log as json. \n\u001b[0;32mldm     \u001b[1;33mlog_dev_match            \u001b[0;31m''\u001b[0;38;5;245m\nRegex to search in loglines - will be highlighted. \n\u001b[0;32mlf      \u001b[1;33mlog_fmt                  \u001b[0;31mauto\u001b[0;38;5;245m\nForce a log format. 0: off, 1: auto, 2: plain, 3: plain_no_colors, 4: json.   \u001b[0;38;5;241m\n\ud83d\udfe2 Json logging has far better performance then the colored console dev log.\nYou can pipe e.g. journalctl output into \"ops log_view -fn -\" to get dev logging from json.\n\nThis value can be set away from auto via export log_fmt as well.\n\u001b[0;32mll      \u001b[1;33mlog_level                \u001b[0;31m20\u001b[0;38;5;245m\nLog level (10: debug, 20: info, ...). You may also say log_level=error \n\u001b[0;32mlsf     \u001b[1;33mlog_stack_filter         \u001b[0;31mfn not contains frozen and fn not contains /rx/\u001b[0;38;5;245m\nWhen logging error tracebacks this is an optional filter. Keywords:fn: filename, frame: frame nr, line: line nr, name: name of callable  \u001b[0;38;5;241m\nExample: fn contains project and frame lt 1 (axiros/pycond expression)\n\u001b[0;32mlsmf    \u001b[1;33mlog_stack_max_frames     \u001b[0;31m3\u001b[0;38;5;245m\nMaximum Frames Shown in Terminal Stack Traces \n\u001b[0;32mltln    \u001b[1;33mlog_thread_local_names   \u001b[0;31mFalse\u001b[0;38;5;245m\nPrefer thread local logger_name, when set \n\u001b[0;32mltf     \u001b[1;33mlog_time_fmt             \u001b[0;31m%m-%d %H:%M:%S\u001b[0;38;5;245m\nLog time format. Shortcuts: \"ISO\", \"dt\" \n\u001b[0;32mlts     \u001b[1;33mlog_to_stdout            \u001b[0;31mFalse\u001b[0;38;5;245m\nDefault: stderr \n\u001b[1;34mops_devapp.project\n\u001b[0;32mappc    \u001b[1;33madd_post_process_cmd     \u001b[0;31m''\u001b[0;38;5;245m\nAdd this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty.\nExample: -appc='2&gt;&amp;1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -&gt; use single quotes).\nTip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \n\u001b[0;32mloref   \u001b[1;33mlog_resources_fully      \u001b[0;31mFalse\u001b[0;38;5;245m\nAlways output all settings of resources when logging \n\u001b[0m\n</code></pre>"},{"location":"dev/logging/#theming","title":"Theming","text":"<p>You can pick a theme for the dev console log output (<code>--log_fmt=2</code>), i.e. the default output format when run in foreground. </p> <p><code>dev logging_style</code> is the tool to do that - say <code>dev ls s</code> to get a theme previewer (using fzf).</p> <p></p> <p>Note: True color themes are not slower than 256 themes - but some terminals do not support them - pick a non true color one then.</p> <p>If you want your terminal base16 styles, pick 'dark'</p>"},{"location":"dev/logging/#watching-json-logs","title":"Watching Json Logs","text":"<p>The <code>ops log_viewer</code> command allows to ingest json logs, including systemd's journal logs, containing them.</p>"},{"location":"dev/plugins/","title":"Plugins","text":"<p>Here is how you create or extend tools with plugins, callable like <code>&lt;toolname&gt; &lt;pluginname&gt; [plugin flags]</code>.</p> <p>Git Analogy</p> <p>In this terminology, \"git\" would be the name of the tool, \"checkout\" would be the name of the plugin.</p>"},{"location":"dev/plugins/#defining-a-new-tool","title":"Defining a New Tool","text":"<p>Using uv, in your <code>pyproject.toml</code> add the name of the tool within the <code>scripts</code> section like so:</p> <pre><code>[project.scripts]\nmyapp = \"devapp.tools.plugin:main\"\n</code></pre> <p>This makes the tool available, with no plugins yet:</p> <p></p> <pre><code>$ uv run myapp -h || true\nNo plugins found. Create &lt;namespace&gt;/plugins/myapp_&lt;namespace&gt;/ folder(s), containing importable python modules.\n</code></pre> <p>We are ready to create plugins:</p> <p>Plugins must reside within <code>&lt;package&gt;/plugins/&lt;tool_name&gt;_&lt;package_name&gt;/</code> subdirectory of packages of the current repo.</p> <p>The package name at the end is to allow \"higher order repos\" to supply plugins with same name but changed behaviour.</p> <p>For the demo we pick the <code>devapp</code> package within this repo, <code>devapps</code>:</p> <p></p> <pre><code>$ mkdir -p \"src/devapp/plugins/myapp_devapp\" &amp;&amp; ls \"src/devapp/plugins\" &amp;&amp; pwd\ndev_devapp\nmyapp_devapp\nops_devapp\n/home/runner/work/devapps/devapps\n</code></pre> <p>Then we create a demo plugin:</p> <pre><code>$ cat src/devapp/plugins/myapp_devapp/say_hello.py\n\"\"\"\nSaying Hello\n\"\"\"\n\nfrom functools import partial\n\nfrom devapp.app import run_app, do, app\nfrom devapp.tools import FLG\n\n\nclass Flags:\n    'Simple Hello World'\n\n    autoshort = 'g'  # all short forms for our flags prefixed with this\n\n    class name:\n        n = 'Who shall be greeted'\n        d = 'User'\n\n\n# --------------------------------------------------------------------------- app\ndef greet(name):\n    print('Hey, %s!' % name)\n\n\ndef run():\n    do(greet, name=FLG.name)\n\n\nmain = partial(run_app, run, flags=Flags)\n</code></pre> <p>The plugin is now available:</p> <p></p> <pre><code>$ myapp -h\n\nUsage: myapp ACTION [--flag[=value] ...]\n\nAvailable Action Plugins:\n    - \u001b[1;32msay_hello\u001b[0m\n\nHelp:\n    myapp &lt;action&gt; &lt;-h|--helpfull&gt; [match]\n\nNote:\n    - Action shortcuts understood, e.g. action \"foo_bar_baz\" = fbb\n    - Plugins are taken on first found basis\n    - Flags also have shortcut versions (e.g. -hf for --helpfull)\n\nExample:\n    myapp say_hello -hf log # all flags about logging\n$ myapp sh -lf 2 -gn Joe\n\u001b[2;38;5;5m08-15 09:42:08 [\u001b[38;5;4minfo     ] \u001b[0mgreet                          [\u001b[38;5;5msay_hello\u001b[0m] \u001b[1;38;5;1mname=\u001b[2;38;5;5mJoe \u001b[1;38;5;1mstore_log=\u001b[2;38;5;5mNone\u001b[0m\nHey, Joe!\n</code></pre> <ul> <li>Further plugins for our <code>myapp</code> tool are now simply added into this directory</li> </ul>"},{"location":"dev/plugins/#extending-a-given-tool","title":"Extending a Given Tool","text":"<p>Higher order repos (dependend/derived on devapp) can add their own plugins for <code>myapp</code>, following the directory convention given above.</p> <p>Means: A package \"foo\" depending on devapp may add a</p> <pre><code>/src(of_foo package)/bar/plugins/myapp_bar/bettergreeter.py\n</code></pre> <p>so that the <code>myapp</code> tool has a better/more specialized greeter plugin.</p> <p>Derived package foo may also change the behaviour of the \"say_hello\" plugin of \"myapp\" by providing this module as well.</p> <p>Here is how you \"patch\" a given module, e.g. the <code>project</code> plugin of the <code>ops</code> tool, from a devapps derived package (here <code>lc-python</code>):</p> <pre><code>~/repos/lc-python/sr/o/p/ops_operators master !3 ?1 \u276f pwd\n/home/gk/repos/lc-python/src/operators/plugins/ops_operators\n~/repos/lc-python/sr/o/p/ops_operators master !3 ?1 \u276f cat project.py\nfrom devapp.plugins.ops_devapp.project import *\n\n\nclass Flags(Flags):\n    'defined here, so that ops project -h works correctly'\n\n# (overwrite your stuff here)\n\nmain = lambda: run_app(run, flags=Flags)\n</code></pre> <p>.</p>"},{"location":"dev/reload_on_change/","title":"Reload on Change","text":"<p>You can have an arbitrary set of files being monitored in the background and have a reload signal sent on change. Your app stays in foreground, in order to debug.</p> <p>This watches all python files, in and below the current dir (the last 1 is for recursive - separator is ':'):</p> <pre><code>while true; do my_devapp --dirwatch .:*.py:1; done\n</code></pre>"},{"location":"dev/tips/","title":"Developer Tips","text":"<p>Assorted Tips for Developing on DevApps packages.</p>"},{"location":"dev/tips/#documentation","title":"Documentation","text":"<p>Can be dynamic, with assertions. See docutools for more. </p>"},{"location":"dev/tips/#cicd","title":"CI/CD","text":""},{"location":"dev/tips/#failed-to-connect-to-bus-no-such-file-or-directory","title":"<code>Failed to connect to bus: No such file or directory</code>","text":"<p>We are using the systemd user service to manage processes. This means there is a systemd process that runs as unprivileged user. The systemd user service is not used as commonly as the normal systemd process manager. For example Red Hat disabled the systemd user service in RHEL 7 (and thereby all distros that come from RHEL, like CentOS, Oracle Linux 7, Amazon Linux 2). However, RedHat has assured that running the systemd user service is supported as long as the service is re-enabled.</p> <p>This is how to start the <code>systemd --user service</code> for user with $UID=UID (the current user):</p> <p>As root create this unit file:</p> <pre><code># cat /etc/systemd/system/user@_UID_.service\n\n[Unit]\nDescription=User Manager for UID %i\nAfter=systemd-user-sessions.service\n# These are present in the RHEL8 version of this file except that the unit is Requires, not Wants.\n# It's listed as Wants here so that if this file is used in a RHEL7 settings, it will not fail.\n# If a user upgrades from RHEL7 to RHEL8, this unit file will continue to work:\n\nAfter=user-runtime-dir@%i.service\nWants=user-runtime-dir@%i.service\n\n[Service]\nLimitNOFILE=infinity\nLimitNPROC=infinity\nUser=%i\nPAMName=systemd-user\nType=notify\n# PermissionsStartOnly is deprecated and will be removed in future versions of systemd\n# This is required for all systemd versions prior to version 231\nPermissionsStartOnly=true\nExecStartPre=/bin/loginctl enable-linger %i\nExecStart=-/lib/systemd/systemd --user\nSlice=user-%i.slice\nKillMode=mixed\nDelegate=yes\nTasksMax=infinity\nRestart=always\nRestartSec=15\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>Then enable and start the unit.</p> <pre><code>Run `ps -fww $(pgrep -f \"systemd --user\")` to verify success, then try re-init the project.\n'''\n\n[Here](https://help.tableau.com/current/server-linux/en-us/systemd_user_service_error.htm) is more information.\n\n\nIn order to debug failing jobs you'll want to run them in foreground, logged in as **another user**, then `su - gitlab-runner`. When you get this error at `systemctl --user status`:\n\n- loginctl enable-linger gitlab-runner  # starts dbus\n- export XDG_RUNTIME_DIR=/run/user/$UID # in .bashrc of gitlab-runner\n\n\n### Get exactly environ of runner\n\n- do `- poetry run env | tee | grep PATH &gt; env` in the before-script section of .gitlab-ci.yml\n- then `set -a &amp;&amp; source ./env &amp;&amp; set +a` in your debug session, after `poetry shell`.\n\n\n\n### Start gitlab-runner within nspawned Container\n\nThis has isolation advantages and also you can instantly restart the whole machine, stopping every system service\nstarted at failed jobs.\n\n\nExample: `systemd-nspawn -D debian_filesystem -b` (filesystem e.g. from `docker pull debian`, then `docker export &lt;containerId&gt; | tar -xf .`)\n\nTo run a whole CI/CD cycle, including docs:\n\n1. `apt-get install make gcc wget curl mercurial locales lsof # for docutools`\n1. install gitlab runner, give it a specific tag, which you configure in your `.gitlab-ci.yml`\n1. install $HOME/miniconda3\n1. Add `.config/pypoetry/auth.toml` and `config.toml` for artifactory\n1. Configure base-index 1 for tmux (for literate programming docu)\n\nNow you can have commits in repos with the tag built by firing up the container:\n\n```bash\n1.~$ alias gitlab\nalias gitlab='sudo systemd-nspawn -D debian_filesystem -b -M gitlab'\n</code></pre> <p>Stop the whole machine any time with ctrl-[[[</p>"},{"location":"dev/tips/#manual-start-of-runner","title":"Manual Start of Runner","text":"<p>Then you can manually run CI/CD jobs:</p> <ol> <li>Login as gitlab-runner user</li> <li>In home dir say: <code>gitlab-runner --debug run</code> </li> <li>Push a commit - watch it build</li> <li>Then stop and check if started as service, i.e. at nspawn container boot.</li> </ol> <p>Trouble Shooting</p> <ul> <li>To be able to login add console and pty/0 into etc/securetty </li> <li>If you change the runner user away from gitlab-runner, the unit file has the be adapted   manually (not done by install routine)</li> <li><code>Ctrl-]]]</code> powers the container off (immediate hard shutdown)</li> </ul>"},{"location":"install/cicd/","title":"CI/CD Setup","text":"<p>devapps repos may be hosted on internal package servers, then we use gitlab-runners to run CI/CD jobs.</p> <p>Note</p> <p>gitlab-runners are available for all major OS. <code>devapps</code> and derived packages builds are run on Linux only.</p> <ol> <li>Download the runner for your architecture</li> <li>Configure tokens and repository CI support as explained in the documentation</li> </ol> <p>In order for a runner to be able to build devapps we configure this in addition:</p>"},{"location":"install/cicd/#access-to-python-versions-via-conda","title":"Access to python versions via conda.","text":"<p>With conda in <code>/data/miniconda3</code> in this example:</p> <pre><code>[gitlab-runner@doglr ~]$ cat /etc/systemd/system/gitlab-runner.service\n[Unit]\nDescription=GitLab Runner\nAfter=syslog.target network.target\nConditionFileIsExecutable=/usr/local/bin/gitlab-runner\n\n[Service]\nStartLimitInterval=5\nStartLimitBurst=10\nEnvironment=PATH=/data/miniconda3/bin:/data/miniconda3/envs/py38/bin:/root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\nExecStart=/usr/local/bin/gitlab-runner \"run\" \"--working-directory\" \"/mnt/volume_fra1_01/gitlab-runner\" \"--config\" \"/etc/gitlab-runner/config.toml\" \"--service\" \"gitlab-runner\" \"--syslog\" \"--user\" \"gitlab-runner\"\n\nRestart=always\nRestartSec=120\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"install/cicd/#access-to-private-artifactory","title":"Access to Private Artifactory","text":"<pre><code>[gitlab-runner@doglr pypoetry]$ pwd\n/data/gitlab-runner/.config/pypoetry\n[gitlab-runner@doglr pypoetry]$ cat auth.toml\n[http-basic]\n[http-basic.ax]\nusername = \"klessinger\"\npassword = \"xxxxxxxxxxxxxxxxxxxxxx\" # use the hashed one on third party machines\n\n\n[gitlab-runner@doglr pypoetry]$ cat config.toml\n[repositories]\n[repositories.ax]\nurl = \"https://artifacts.github.com/artifactory/api/pypi/pypi-ax-sources/simple/\"\n</code></pre>"},{"location":"install/cicd/#tmux","title":"Tmux","text":"<p>Configure the base index to be 1 for literate programming docu builds in <code>$HOME/.tmux.conf</code>:</p> <pre><code>[gitlab-runner@doglr ~]$ cat .tmux.conf\nset-option -g base-index 1\nset-window-option -g pane-base-index 1\n</code></pre> <p>Note</p> <p>If no tmux config file is found at an lp step, we automatically do create one, with the content above. </p>"},{"location":"install/cicd/#git","title":"git","text":"<p>Setup git - some <code>doc pre_process</code> doc building steps do commit the changed pages:</p> <pre><code>$ git config --global user.email gitlab-runner@&lt;hostname&gt;\n$ git config --global user.name \"gitlab-runner\"\n</code></pre>"},{"location":"install/cicd/#ci-files","title":"CI Files","text":""},{"location":"install/cicd/#adding-development-versions-of-other-repos","title":"Adding Development Versions of Other Repos","text":"<p>CI with development versions</p> <p>Should you temporarily need development versions of other repos of the devapps family you can do it like so in your <code>.gitlab-ci.yml</code> file:</p> <p>Example: dev. version of lc-doctools required:</p> <pre><code>variables:\n  PIP_CACHE_DIR: \"${CI_PROJECT_DIR}/.cache/pip\"\n  # until we have a fixed version we use a development version:\n  PYTHONPATH: \"${CI_PROJECT_DIR}/build/lc-doctools/src\"\n  make_autodocs: \"true\"\n  HGUSER: cibuild # for badges\n\n\ncache:\n  key: \"${CI_JOB_NAME}\"\n  key: lc_devapp_38\n  paths:\n    - .cache/pip\n    - .venv\n\nstages:\n  #- quality\n  - doctests\n\n# TODO: remove this cloning when version is fix:\n.install-deps-template: &amp;install-deps\n  before_script:\n    - env # print the environ\n    - mkdir build\n    - git clone \"https://gitlab-ci-token:${CI_JOB_TOKEN}@mycompany.com/devapps/lc-doctools.git\" \"build/lc-doctools\"\n    - poetry --version\n    - poetry debug\n    - poetry config virtualenvs.in-project true --local\n    - poetry install -vv\n  tags:\n(...)\n</code></pre> <p>Warning</p> <p>There will be a rather prominent warning in your built documentation when you built using non released dependencies!</p>"},{"location":"install/dev_inst/","title":"Development Install","text":"<p>In order to develop applications or projects derived on <code>devapps</code> (or on <code>devapps</code> itself):</p> <ol> <li>clone this or the derived application's repository</li> <li>configure artifactory credentials (for packages referred to in your <code>pyproject.toml</code> file) as explained before</li> <li><code>pip install poetry</code> if you not yet have the build system (does not need to match your target python version)</li> <li>run <code>poetry install</code></li> </ol> <p>It takes around a minute for poetry to resolve all dependencies. After this you can enter the virtual environment via poetry shell with all required packages and commands available:</p> CmdOutput <pre><code>$ poetry shell\n$ ops -h\n</code></pre> <p></p> <pre><code>$ poetry shell\nCommand 'poetry' not found, but can be installed with:\napt install python3-poetry\nPlease ask your administrator.\n$\n$ ops -h\n\nUsage: ops ACTION [--flag[=value] ...]\n\nAvailable Action Plugins:\n    - \u001b[1m\u001b[32mcontainer_build\n\u001b[0m    - \u001b[1m\u001b[32mcontainer_pull\n\u001b[0m    - \u001b[1m\u001b[32mfs_build\n\u001b[0m    - \u001b[1m\u001b[32minfra_aws_cloud\n\u001b[0m    - \u001b[1m\u001b[32minfra_digital_ocean\n\u001b[0m    - \u001b[1m\u001b[32minfra_hetzner_cloud\n\u001b[0m    - \u001b[1m\u001b[32mkubectl\n\u001b[0m    - \u001b[1m\u001b[32mlife_cycle\n\u001b[0m    - \u001b[1m\u001b[32mlog_view\n\u001b[0m    - \u001b[1m\u001b[32mpkgs\n\u001b[0m    - \u001b[1m\u001b[32mproject\n\u001b[0m    - \u001b[1m\u001b[32mrun\n\u001b[0m    - \u001b[1m\u001b[32msystem\n\n\u001b[0mHelp:\n    ops &lt;action&gt; &lt;-h|--helpfull&gt; [match]\n\nNote:\n    - Action shortcuts understood, e.g. action \"foo_bar_baz\" = fbb\n    - Plugins are taken on first found basis\n    - Flags also have shortcut versions (e.g. -hf for --helpfull)\n\nExample:\n    ops container_build -hf log # all flags about logging\n</code></pre>"},{"location":"install/dev_inst/#co-developing-dependent-packages","title":"Co-Developing Dependent Packages","text":"<p>If you want to develop not only on the poetry installed package but also on others than using a PYTHONPATH based trick is convenient:</p> <p>Clone the other repositories under development as well and export <code>$PYTHONPATH</code> like so:</p> <pre><code>$ (lc-python-Z3KKTfGL-py3.7) 2.lc-python$ type ldp\nldp is aliased to `export PYTHONPATH=\"/home/joe/repos/devapps/src:/home/joe/repos/lc-doctools/src\"; cd /home/joe/repos/lc-python; poetry shell'\n</code></pre> <p>The devapps dependent <code>lc-python</code> environment will now use e.g. <code>devapps</code> from the checkout and not from the configured package.</p> <p>Scripts from cloned repos</p> <p>The PYTHONPATH trick works also when those other packages ship with scripts, e.g. the <code>doc</code> script from <code>lc-doctools</code>, or <code>ops</code> from <code>devapps</code>.  You do need to have at least one version with such a script in your <code>pyproject.yml</code>, so that the script is installed and found in your <code>$PATH</code> within the virtual environment.</p>"},{"location":"install/prod_inst/","title":"Installing DevApps Derived Packages","text":"<p>Here is how applications derived from <code>devapps</code> are installed. It is actually a normal \"pip install\" - but you have to configure the package server, which may be hosted on private Artifactory server.</p> <p>You will never <code>pip install devapps</code> standalone in a project but it will be installed as a requirement of derived packages.</p> <p>Since installation steps are the same we lay them out here and refer to here from derived packages and applications.</p>"},{"location":"install/prod_inst/#package-server","title":"Package Server","text":"<p>Here are the different ways to configure a private package server.</p>"},{"location":"install/prod_inst/#with-pip","title":"With pip","text":"<p>For a normal pip install do this:</p> <pre><code>$ url=\"https://$user:$pass@artifacts.mycompany.com/artifactory/api/pypi/pypi/simple/\" \n</code></pre> <p>Then make sure your intended Python environment is active, see Python installation:</p> <pre><code>$ pip install --user --index-url \"$url\" devapps \n</code></pre>"},{"location":"install/prod_inst/#with-pipx","title":"With pipx","text":"<pre><code>$ pip install --user pipx # if you not yet have it\n$ url=\"https://$user:$pass@artifacts.mycompany.com/artifactory/api/pypi/pypi/simple/\" \n$ pipx install --index-url \"$url\" devapps # --verbose\n</code></pre>"},{"location":"install/prod_inst/#with-poetry","title":"With poetry","text":"<p>Poetry is the build and dependency management system, which all devapps are built with. This way enables you to run e.g. tests, since all development and test dependencies will be installed as well. </p> <p>See here regarding repo access configuration. </p> <p>Here the steps:</p>"},{"location":"install/prod_inst/#configure-credentials","title":"Configure Credentials","text":"<p>Configure artifactory credentials for python packages like so:</p> <p>Example:</p> <pre><code>$ poetry config repositories.ax \"https://artifacts.mycompany.com/artifactory/api/pypi/pypi-ax-sources/simple/\"\n# using an *encrypted* password, will be stored in plain text w/o password manager:\n$ poetry config http-basic.ax myusername xP6xCi3xxxxxxxxxxxxxxxxxxxx \n</code></pre> <p>pyproject.toml:</p> <pre><code>[[tool.poetry.source]]\nname = \"ax\"\nurl = \"https://artifacts.mycompany.com/artifactory/api/pypi/pypi-ax-sources/simple\"\nsecondary = true\n</code></pre> <p>Or manually:</p> <pre><code>$ cat $HOME/.config/pypoetry/auth.toml # on Linux. OSX / Windows: See poetry docs\n[http-basic]\n[http-basic.ax]\nusername = \"myusername\"\n# use your encrypted password:\npassword = \"aP6oxxxxxxxxxxxxxxxxxxxxuZSyr\"\n\n$ cat $HOME/.config/pypoetry/config.toml\n[repositories]\n[repositories.ax]\nurl = \"https://artifacts.mycompany.com/artifactory/api/pypi/pypi-ax-sources/simple/\"\n</code></pre> <p>Then, as for a development install (i.e. with development packages installed).</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"install/python/","title":"Installing Python","text":"<p>Python is the base requirement for any devapp. </p> <p>This base package requires minimum Python 3.7 but derived apps may require higher versions.</p> <p>Python Environment</p> <p>We highly recommend to not use the Python of your host system but install within a dedicated environment.</p> <p>To install Python versions, there are many options, incl. <code>miniconda</code>, <code>pyenv</code> or packages of your distribution..</p> <p>Subsequently we explain the two ways of installing and activating a specific Python version, which do not require root permissions and are contained within directories.</p>"},{"location":"install/python/#conda","title":"Conda","text":"<p>Conda or its lighther variant Miniconda is a binary package dependency management and deployment system.</p> <p>It allows to install not only Python in any version under one base environment but also other resources, e.g. redis, nodejs or other databases, w/o \"spamming\" your filesystem outside of the base directory.   This can be done conflict free, within prefixes (environments).</p> <p>Conda is comparable to the homebrew packaging system but not dependent on a fixed directory within <code>/usr/local</code>. A localized homebrew is very similar to Conda (but restricted to OSX only, i.e. no option for us).</p> <p>Installation is simple and described here.</p> <p>On Linux:</p> <pre><code>curl 'https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh' -O install.sh\nchmod +x install.sh\n./install.sh -b # installs non interactively into $HOME/miniconda3\n\n# makes the conda command available (consider an alias within e.g. your .bashrc):\nsource miniconda3/etc/profile.d/conda.sh \n\n# we can now install any python version within the base environment like so:\nconda  create -n py38  python=3.8\n# and activate, not leaving your current shell process:\nconda activate py38\n</code></pre> <p>Activation not required to run</p> <p>Like with homebrew, any installed binary can be executed without previous activation of its environment.</p> <p>Example: <code>$HOME/miniconda3/envs/myredis/bin/redis-server</code> will work.</p>"},{"location":"install/python/#pyenv","title":"Pyenv","text":"<p>If you \"only\" require Python, then <code>pyenv</code> is a more lightweight way than conda.</p> <pre><code># install pyenv\ngit clone https://github.com/pyenv/pyenv ~/.pyenv\n\n# setup pyenv (you should also put these three lines in .bashrc or similar)\nexport PATH=\"${HOME}/.pyenv/bin:${PATH}\"\nexport PYENV_ROOT=\"${HOME}/.pyenv\"\neval \"$(pyenv init -)\"\n\n# install Python 3.8\npyenv install 3.8\n\n# make it available globally\npyenv global system 3.8\n</code></pre>"},{"location":"interactive/","title":"Interactive FZF Apps","text":""},{"location":"interactive/#parameters","title":"Parameters","text":""},{"location":"interactive/#app-level","title":"App Level","text":""},{"location":"interactive/#mandatory","title":"Mandatory","text":""},{"location":"interactive/#optional","title":"Optional","text":"<ul> <li><code>str:default_menu</code> [Alphabetically first menu class name]: Which menu to present at app start.</li> <li><code>str:name</code> (str): No logical purpose.</li> </ul>"},{"location":"interactive/#menu-level","title":"Menu Level","text":""},{"location":"interactive/#mandatory_1","title":"Mandatory","text":"<ul> <li><code>callable-&gt;list:produce</code>: Must return raw data as list. Typically list of dicts.</li> </ul>"},{"location":"interactive/#understanding-the-application","title":"Understanding the Application","text":"<p>Follow <code>class Streams</code> within the pipeline module. Most important is the stream starting with the Menu items producer (the items stream).</p>"},{"location":"interactive/#debugging","title":"Debugging","text":"<ul> <li><code>&lt;appname&gt; -hf | grep d_tmp</code> shows you where the application log files are written.</li> <li>Loglevel via <code>-ll</code> / <code>--log_level</code></li> <li>In <code>pipeline.py</code> ensure the debug mode is set, so that each stream map operator function is wrapped via <code>wrap</code> function, and therefore logged.</li> </ul>"},{"location":"interactive/#interactive-debugging","title":"Interactive Debugging","text":"<p><code>pp items</code> in breakpoints within functions of the items stream will print the items with entries reduced to just a few.</p> <ul> <li>Use Fzf.dbgstop when debugging stuff while fzf is on.</li> <li>Use wrap function in pipeline builder</li> </ul>"},{"location":"interactive/#tips","title":"Tips","text":"<p>Sometimes it is useful to set the fzf.cmd to sth like 'sleep 10000' just before the <code>popen_fzf</code> - then you still have std out and in.</p>"},{"location":"interactive/fzf/","title":"FZF Mode of Operation","text":""},{"location":"interactive/fzf/#no-preview","title":"No Preview","text":"<pre><code>echo -e 'hello\\nworld' | fzf \n</code></pre> <p>We call the echo command \"Items Process\", subsequently - it produces (by default) line separated data chunks:</p> <p></p> <p>Not shown are non filter/select interactions of the user via the TTY, where the user can</p> <ul> <li>mark one ore more items (using up/down keys by default)</li> <li>change the rendering behaviour while fzf is running</li> <li>complete fzf (i.e. have it exit early), with information about what the user entered</li> </ul> <p>Note</p> <p>Subsequently we connect user and items process directly to fzf.</p>"},{"location":"interactive/fzf/#streaming-items-process","title":"Streaming Items Process","text":"<p>fzf does not wait until items process is exitting but renders as items arrive:</p> <pre><code>( echo hello; sleep 1; echo world) | fzf\n</code></pre> <p></p>"},{"location":"interactive/fzf/#with-preview","title":"With Preview","text":"<ul> <li>fzf can start a preview process (PP) at item mark or filter time</li> <li>fzf displays what the process produces on its stdout, within its preview pane</li> </ul>"},{"location":"interactive/fzf/#with-streaming-preview","title":"With Streaming Preview","text":"<p>As for items process, fzf does also not wait for the preview process to exit - but starts outputting as soon as data is arriving:</p> <p></p> <p>Max One Preview Process At A Time</p> <p>If the user marks/filters a different item then fzf kills any possibly running preview process - and starts a new one.</p>"},{"location":"ops/log_viewer/","title":"Log Viewer","text":"<p><code>ops log_viewer</code> formats json logs into the colorized dev log format, with all options.</p> <ul> <li> <p>The <code>--file_name</code> can be set to '-', to colorized streaming from a pipe.</p> </li> <li> <p>The <code>--from_journal</code> switch will digest std journalctl output, putting the process pid into a <code>_pid</code> keyword.</p> </li> </ul>"},{"location":"ops/log_viewer/#example","title":"Example","text":"<p>We go via a file to show the principle (use <code>-f</code> to follow journalctl output, where you can also combine output of many daemons):</p> <pre><code>journalctl --user -u myapp.service &gt; journalout \ntail journal_out \nOct 21 22:48:35 axgk client[2388688]: {\"id\":\"d25b36e2be237ef8\",\"event\":\"Subscribing\",\"timestamp\":\"10-21 20:48:35\",\"level\":\"info\",\"logger\":\"client\"}\nOct 21 22:48:35 axgk client[2388688]: {\"id\":\"1f060dd1f96ef2b0\",\"event\":\"Subscribing\",\"timestamp\":\"10-21 20:48:35\",\"level\":\"info\",\"logger\":\"client\"}\nOct 21 22:48:36 axgk client[2388688]: {\"host\":\"127.0.0.1\",\"port\":9092,\"timeout\":0.5,\"event\":\"Timeout - Kafka Sink\",\"timestamp\":\"10-21 20:48:36\",\"level\":\"error\",\"logger\":\"client\"}\nOct 21 22:48:36 axgk client[2388688]: {\"event\":\"TALKING KAFKA OFFLINE\",\"timestamp\":\"10-21 20:48:36\",\"level\":\"error\",\"logger\":\"client\"}\nOct 21 22:48:36 axgk client[2388688]: {\"id\":\"a9b21ce0400e09ed\",\"event\":\"Subscribing\",\"timestamp\":\"10-21 20:48:36\",\"level\":\"info\",\"logger\":\"client\"}\nOct 21 22:48:36 axgk client[2388688]: {\"host\":\"127.0.0.1\",\"port\":9092,\"timeout\":0.5,\"event\":\"Timeout - Kafka Sink\",\"timestamp\":\"10-21 20:48:36\",\"level\":\"error\",\"logger\":\"client\"}\nOct 21 22:48:36 axgk client[2388688]: {\"event\":\"TALKING KAFKA OFFLINE\",\"timestamp\":\"10-21 20:48:36\",\"level\":\"error\",\"logger\":\"client\"}\nOct 21 22:48:36 axgk client[2388688]: {\"type\":\"register\",\"_ids\":{\"sck\":\"ax-t333zdgj-geg6uj5q\",\"hbn\":\"hub1\",\"hub\":\"127.0.0.1:1881\"},\"payload_len\":48404,\"payload\":\"{'funcs': {'custom.u...\",\"event\":\"C -&gt; H: register\",\"timestamp\":\"10-21 20:48:36\",\"level\":\"debug\",\"logger\":\"client\"}\nOct 21 22:48:36 axgk client[2388688]: {\"type\": \"status\", \"ts\": 1697921316974, \"_ws\": \"ws://127.0.0.1:1881/ws/ax-hub\", \"payload_len\": 10, \"payload\": \"registered\", \"event\": \"H -&gt; C: status\", \"timestamp\": \"10-21 20:48:36\", \"level\": \"debug\", \"logger\": \"client\"}\nOct 21 22:48:36 axgk client[2388688]: {\"type\":\"status\",\"ts\":1697921316974,\"payload_len\":22768,\"payload\":\"{'pipes': [{'op_ids'...\",\"event\":\"C -&gt; H: status\",\"timestamp\":\"10-21 20:48:36\",\"level\":\"debug\",\"logger\":\"client\"}\n</code></pre> <p>Now we check the log incl. debug statements, match for \"KAFKA\" and dimm non matching lines:</p> <pre><code>ops lv -fn journal_out --from_journal -ll 10 --log_dev_match KAFKA --log_dev_dimm_no_match\n</code></pre> <p></p>"},{"location":"projects/","title":"Projects","text":"<p>During the previous sections you learned how to install the application libs and executables.</p> <p>After you installed Python and a DevApps application package (with its dependencies) either in pip(x) production or poetry development mode, you can now create and maintain projects, i.e. directories, where additional project specific files are kept.</p> <p>These can be...</p> <ul> <li>config files</li> <li>additional code</li> <li>specific executables</li> <li>secret stores</li> <li>log and data directories</li> </ul> <p>...and so on.</p> <ul> <li>The directory of projects is arbitrary, e.g. <code>$HOME/myproject</code></li> <li>In real projects it is typically tracked in large parts via git.</li> </ul> <p>Hint</p> <p>When you develop on a product package, then that directory can be kept identical with the product repo directory itself, while developping.</p> <p>The <code>devapps</code> base repo installs a tool (<code>ops</code>), which assists at creation and normalization of projects.</p> <p>Before we explain that tool, we first highlight the basics of DevApps resources. </p>"},{"location":"projects/resource_definitions/","title":"Resource Definitions","text":"<p>Here the mechanics for defining resources are given - for developers of new apps.</p> <p>Those must be defined in <code>&lt;namespace&gt;/operations/resources.py</code> files.</p> <p>Hint</p> <p>Check existing resources.py files in other devapp repos for further examples.</p> <pre><code># find devapp's resources files:\nl=\"$(python -c 'import devapp; print(devapp.__file__)')\"\ncd \"$(dirname $l)/..\" # in site-packages now\nfind . -print |grep 'operations/resources.py'\n</code></pre> <p>Mechanics in <code>devapp/tools/resource.py</code></p>"},{"location":"projects/resource_definitions/#resource-base-variables","title":"Resource Base Variables","text":"<pre><code>class rsc:\n    class hedgedoc:\n        foo = 'bar'\n</code></pre> <p>results, before any exploration in the following starting state:</p> <pre><code>(Pdb) pp rsc\n\n- bin_name        hedgedoc\n- disabled        False\n- doc\n- foo             bar\n- host_conf_dir   $PROJECT_ROOT/conf/${host:-$HOSTNAME}/hedgedoc\n- installed       False\n- module          hedgedoc\n- module_dir      /home/gk/repos/ax/devapps/lc-docs/src/hedgedoc\n- name            hedgedoc\n</code></pre>"},{"location":"projects/resource_definitions/#bin_name-modify-bin-wrapper-name","title":"<code>bin_name</code>: Modify bin wrapper name","text":"<p>Modify name of wrapper in bin folder via env: <code>export &lt;origname&gt;_name=xxx</code></p> <p>Example:</p> <pre><code>hedgedoc_name=xxx ops p list\n&gt; devapp/tools/resource.py(707)check_installed_path()\n(Pdb) pp rsc\n\n- bin_name        xxx\n- host_conf_dir   $PROJECT_ROOT/conf/${host:-$HOSTNAME}/xxx\n(...)\n</code></pre>"},{"location":"projects/resource_definitions/#flow","title":"Flow","text":""},{"location":"projects/resource_definitions/#determining-installed-state","title":"Determining Installed State","text":"<p>At install or list, we find if the resource is installed, by checking both, path presence and post_install been run.</p>"},{"location":"projects/resource_definitions/#path-present","title":"Path Present","text":"<p><code>path</code> determined by resource type:</p> <ul> <li>If <code>pkg</code> is False, it is <code>project.root()/bin</code> - i.e. present</li> <li>If fs resource: <code>fs_dir/rsc.name</code> (fs_dir sth like <code>fs</code> in conda root env)</li> <li>S.conda_prefix + '/envs/%s/bin' % (g(rsc, 'conda_env', rsc.name)) otherwise</li> </ul> <p>Presence is given when <code>path/cmd|exe</code> is present, if cmd or exe exist - else <code>path</code> present. If a resource defines a <code>verify_present</code> function, only the path is returned in <code>rsc_path</code> , which will later, at run time, put in the $PATH by the wrapper.</p>"},{"location":"projects/resource_definitions/#post-install-been-run","title":"Post Install Been Run","text":"<p>If the rsc defines a <code>post_inst</code> function, it will be called and if it's result is truthy, we consider this pass. Default is True.</p> <p>=&gt; Provide such a function if the path may be present but resource is still not installed possibly, even if. Check there if all if there, and only then return True.</p> <p>This is only important for list.</p>"},{"location":"projects/resource_definitions/#installing-conda","title":"Installing: Conda","text":"<p>Install mode is conda, if pkg is not set to False and not fs resource.</p> <p>Env name is <code>g(rsc, 'conda_env', rsc.name)</code>, i.e. settable via <code>conda_env = \"foo\"</code></p> <p>We prefer micromamba if available, else we use conda.</p> <p>What to install into the environ:</p> <pre><code>p = g(rsc, 'conda_pkg') or g(rsc, 'pkg') or ' '.join(rsc.provides)\n</code></pre>"},{"location":"projects/resource_definitions/#postinstall-functions","title":"Postinstall Functions","text":"<p>Resource with a post_inst step (after conda install the package).</p> <p>Provide all the install steps, incl. those for all provides within a <code>post_inst</code> function, also for all provides.</p> <pre><code>def my_post_inst(rsc, install=False, verify=False, api=None, **kw):\n    \"\"\"Install steps, also for all provides\"\"\"\n    d = api.rsc_path(rsc) or ''\n    fn_cfg = d + '/../config/elasticsearch.yml'\n    cfg = read_file(fn_cfg, dflt='')\n    if verify:\n        (...) # check done (also check if post_inst function was run)\n    if install:\n        (...) # run postinstall\n\n\ndef foo(**kw):\n    \"\"\"Just deliver the wrapper params for a provides here, no installation\"\"\"\n     return {\n            'env': {'fooenvparam': 'bar'},\n            'cmd': 'foo -bar'\n      }\n\ndef elasticsearch(**kw):\n    \"\"\"Just deliver the wrapper params here, no installation\"\"\"\n    return 'elasticsearch -flag1 ..'\n\nclass rsc:\n    class elasticsearch:\n        d = True # disabled, only installed with -irm elastic\n        cmd = elasticsearch # name of bin/&lt;wrapper&gt;\n        conda_pkg = 'elasticsearch-bin'\n        conda_chan = 'anaconda-platform'\n        port = 9200\n        port_wait_timeout = 20\n        post_inst = my_post_inst # postinstall function after conda install\n        systemd = 'elasticsearch' # it is a service -&gt; unit can be created\n        provides = [foo] # optional other executables\n</code></pre>"},{"location":"projects/resources/","title":"Resources","text":"<p>DevApps should work cross OS and distributions and often depend on interplaying with processes and tools not written in Python - sometimes significantly customized, like Node-RED for the lc-python based Low Code application family.</p> <p>Hint</p> <p>Such tools might be (command line) utilities like <code>rg</code> and <code>fzf</code> but also databases like redis or mysql.</p> <p>This section explains which technologies and tools DevApps provides and why - in order to deliver a 'just works by default' user experience.</p> <p>Batteries included but Replaceable</p> <p>There is no need for the user to use these technologies, when there are better suited alternatives in his working environment, e.g. native packages or containers.</p>"},{"location":"projects/resources/#preliminary-considerations","title":"Preliminary Considerations","text":"<p>Applications are typically distributed over the filesystem in various places:</p> <ol> <li>The actual binaries and libraries of the app itself</li> <li>The dependencies of the app (libraries)</li> <li>The app configuration, which might include custom code</li> <li>Logs, data, temporary files</li> </ol> <p>And the same for all resources, e.g. databases which the app requires to run.</p> <p>The specific ways how resources and their dependencies are arranged within the system depends on the OS (Linux vs BSDs vs OSx vs Windows) but even within OS distributions and versions.</p> <p>Devapps based applications give the user the option to keep all that together:</p> <pre><code>\u251c\u2500\u2500 app_python libs_and_executables (products)\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 &lt;in the virtual python environment&gt;\n\u2502\n\u251c\u2500\u2500 app_project_folder\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 &lt;e.g. redis-server start wrapper&gt;\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tmp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 &lt;usually within HOME folder&gt;\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 work\n\u2502\n\u2514\u2500\u2500 third party app_resources (conda, filesystems)\n    \u251c\u2500\u2500 conda env:_resource_one\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 &lt;e.g. redis&gt;\n    \u251c\u2500\u2500 conda env:_resource_two\n    \u2502 \u00a0 \u2514\u2500\u2500 &lt;e.g. mysql&gt;\n    \u2514\u2500\u2500 fs \n        \u2514\u2500\u2500 &lt;complete filesystem for resource 3&gt;\n \n</code></pre> <p>In development mode, i.e. when you work with a clone of a specific devapps based repo, then</p> <ul> <li>the project folder and the poetry environment of the devapps lib under development may be identical</li> <li>the resources directory may also be contained within that directory. Often more practical is, to keep those elsewhere, for re-usability reasons</li> </ul>"},{"location":"projects/resources/#technology-choices-resource-types","title":"Technology Choices / Resource Types","text":"<p>Currently devapp manages the following resource types:</p>"},{"location":"projects/resources/#filesystem","title":"Filesystem","text":"<p>This allows to pull whole filesystems layer by layer from container reqistries and have them put together locally using tar, without the need for root permissions or the presence of container tools.</p> <p>Tools and daemons within those filesystems are usable, often w/o the need to run within the prefix (e.g. <code>$LD_LIBRARY_PATH</code> is often enough, i.e. then w/o chroot permissions).  </p>"},{"location":"projects/resources/#conda","title":"Conda","text":"<p>As already mentioned, binary packages from the Anaconda ecosystem allow to install resources, 100% compliant with the goals stated above:</p> <ul> <li>Distribution independent</li> <li>Cross platform binary packages</li> <li>Installable in different versions</li> <li>W/o root permissions</li> <li>W/o affecting the file system outside a configurable prefix.</li> </ul> <p>After installation the resources are completely contained within <code>$HOME/miniconda3/envs/&lt;resource name&gt;</code> and can be deleted by removing the <code>envs/&lt;resource name&gt;</code> directories.</p> <p>Downsides:</p> <ul> <li>Not all is available yet, the ecosystem is smaller, compared to big distributions like Debian</li> <li>Less reliable long term maintenance - much smaller community. Currently the third party conda forge channel maintains the biggest packages index.</li> </ul> <p>Conda is the technology of choice for third party tools and services</p> <p>For the batteries included but replaceable[1] approach, we consider the advantages to outweigh the disadvantages and therefore the <code>devapps</code> included tool to install resources is using Conda as primary packaging system.   </p> <p>[1] e.g. in production environments</p> <p>In the next chapter you'll learn how the <code>ops project</code> tool allows to create projects and have resources installed. </p>"},{"location":"projects/usage/","title":"The <code>ops project</code> Tool","text":"<p>After installation of <code>devapps</code> you have the <code>ops project</code> command available<sup>1</sup>. The tool allows to install and maintain projects and resources.</p>"},{"location":"projects/usage/#project","title":"Project","text":"<p>To use the tool, first activate your environment via <code>poetry shell</code> or `. .venv/bin/activte' in case of a development installation (virtual environ activation in case of a uv / pip(x) based install).</p> <p>Let's now create a (new) directory for the project:</p> <p></p> <pre><code>$ mkdir $HOME/myproject &amp;&amp; cd $HOME/myproject &amp;&amp; ls -lta\ntotal 8\ndrwxr-xr-x  2 runner docker 4096 Aug 15 09:42 .\ndrwxr-x--- 14 runner docker 4096 Aug 15 09:42 ..\n</code></pre>"},{"location":"projects/usage/#resources","title":"Resources","text":"<p><code>devapps</code> (and derived packages) contain resource defining python modules named <code>resources.py</code>.</p>"},{"location":"projects/usage/#resources-of-devapps","title":"Resources of <code>devapps</code>","text":"<p>Here are the resources defined in <code>devapps</code>. They are required for running the tests but also provide some tools:</p> CmdOutput <pre><code>$ ops project list\n</code></pre> <p></p> <pre><code>$ ops project list\n\u001b[2m\u001b[38;5;5m08-15 09:42:15 [\u001b[38;5;4minfo     ] \u001b[0mDirectories                    [\u001b[38;5;5mlist\u001b[39m] \u001b[1m\u001b[38;5;1mconda_prefix=\u001b[2m\u001b[38;5;5m/home/runner/micromamba \u001b[38;5;1mfs_dir=\u001b[38;5;5m/home/runner/micromamba/fs(default)\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:15 [\u001b[1m\u001b[38;5;124merror    ] \u001b[0mNot found                      [\u001b[38;5;5mlist\u001b[39m] \u001b[1m\u001b[38;5;1mcmd=\u001b[2m\u001b[38;5;5m/home/runner/micromamba/envs/lc_tools/bin/git\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:15 [\u001b[1m\u001b[38;5;124merror    ] \u001b[0mNot found                      [\u001b[38;5;5mlist\u001b[39m] \u001b[1m\u001b[38;5;1mcmd=\u001b[2m\u001b[38;5;5m/home/runner/micromamba/envs/lc_tools_kf/bin/rotatelogs\n\n\u001b[0m\u001b[31m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u001b[1mTraceback \u001b[2m(most recent call last)\u001b[0m\u001b[31m \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502\u001b[39m \u001b[2m/home/runner/work/devapps/devapps/src/devapp/tools/\u001b[0;1m__init__.py\u001b[0m:1449 in root  \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1446 \u2502   \u2502   #     return r\u001b[0m                                                \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1447 \u2502   \u2502   \u001b[0mp = project.dir_home                                          \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1448 \u2502   \u2502   \u001b[0m\u001b[94mif\u001b[39m \u001b[95mnot\u001b[39m p:                                                     \u001b[31m\u2502\n\u2502\u001b[39m \u001b[31m\u2771 \u001b[39m1449 \u001b[2m\u2502   \u2502   \u2502   \u001b[0mp = project.set_project_dir(no_fail=no_fail)              \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1450 \u2502   \u2502   \u2502   \u001b[0m\u001b[94mif\u001b[39m p:                                                     \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1451 \u2502   \u2502   \u2502   \u2502   \u001b[0mb = p + \u001b[33m'/bin:'\u001b[39m                                       \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1452 \u2502   \u2502   \u2502   \u2502   \u001b[0m\u001b[94mif\u001b[39m b \u001b[95mnot\u001b[39m \u001b[95min\u001b[39m envget(\u001b[33m'PATH'\u001b[39m, \u001b[33m''\u001b[39m):                       \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u256d\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m                                                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m \u001b[3m\u001b[33mno_fail\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[91mFalse\u001b[0m \u001b[34m\u2502\u001b[39m                                                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m       \u001b[3m\u001b[33mp\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[35mNone\u001b[0m  \u001b[34m\u2502\u001b[39m                                                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m                                                          \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[2m/home/runner/work/devapps/devapps/src/devapp/tools/\u001b[0;1m__init__.py\u001b[0m:1478 in       \u001b[31m\u2502\n\u2502\u001b[39m set_project_dir                                                              \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1475 \u2502   \u2502   \u2502   \u001b[0m\u001b[94mreturn\u001b[39m                                                    \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1476 \u2502   \u2502   \u001b[0m\u001b[94mfrom\u001b[90m \u001b[4m\u001b[96mdevapp.app\u001b[0m\u001b[90m \u001b[94mimport\u001b[39m app                                    \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1477 \u2502   \u2502   \u001b[0m                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[31m\u2771 \u001b[39m1478 \u001b[2m\u2502   \u2502   \u001b[0mapp.die(\u001b[33m'could not determine project root dir'\u001b[39m)               \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1479 \u2502   \u001b[0m                                                                  \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1480 \u2502   \u001b[0m\u001b[94mdef\u001b[90m \u001b[92mfn_resources\u001b[39m():                                               \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m1481 \u2502   \u2502   \u001b[0m\u001b[94mreturn\u001b[39m project.root() + \u001b[33m'/.resources.json'\u001b[39m                    \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m                                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m     \u001b[3m\u001b[33mapp\u001b[0m\u001b[31m =\u001b[39m \u001b[1m{\u001b[0m\u001b[32m\"DevApp\"\u001b[39m: \u001b[32m\"project\"\u001b[1m\u001b[39m}\u001b[0m \u001b[34m\u2502\u001b[39m                                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m       \u001b[3m\u001b[33md\u001b[0m\u001b[31m =\u001b[39m \u001b[32m'/'\u001b[39m                   \u001b[34m\u2502\u001b[39m                                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m     \u001b[3m\u001b[33mdir\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[35mNone\u001b[0m                  \u001b[34m\u2502\u001b[39m                                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m      \u001b[3m\u001b[33mfn\u001b[0m\u001b[31m =\u001b[39m \u001b[32m'.git'\u001b[39m                \u001b[34m\u2502\u001b[39m                                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m \u001b[3m\u001b[33mno_fail\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[91mFalse\u001b[0m                 \u001b[34m\u2502\u001b[39m                                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m                                          \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[2m/home/runner/work/devapps/devapps/src/devapp/\u001b[0;1mapp.py\u001b[0m:175 in die               \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m172 \u2502   \u2502   \u001b[0m\u001b[94mif\u001b[39m silent:                                                     \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m173 \u2502   \u2502   \u2502   \u001b[0mapp.fatal(msg, **kw)                                       \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m174 \u2502   \u2502   \u2502   \u001b[0msys.exit(\u001b[94m1\u001b[39m)                                                \u001b[31m\u2502\n\u2502\u001b[39m \u001b[31m\u2771 \u001b[39m175 \u001b[2m\u2502   \u2502   \u001b[0m\u001b[94mraise\u001b[39m DieNow(msg, kw)                                          \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m176 \u2502   \u001b[0m                                                                   \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m177 \u2502   \u001b[0mapp.die = die                                                      \u001b[31m\u2502\n\u2502\u001b[39m   \u001b[2m178 \u2502   \u001b[0mapp.name = name                                                    \u001b[31m\u2502\n\u2502\u001b[39m                                                                              \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m     \u001b[3m\u001b[33mkw\u001b[0m\u001b[31m =\u001b[39m \u001b[1m{}\u001b[0m                                     \u001b[34m\u2502\u001b[39m                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m    \u001b[3m\u001b[33mmsg\u001b[0m\u001b[31m =\u001b[39m \u001b[32m'could not determine project root dir'\u001b[39m \u001b[34m\u2502\u001b[39m                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2502\u001b[39m \u001b[3m\u001b[33msilent\u001b[0m\u001b[31m =\u001b[39m \u001b[3m\u001b[91mFalse\u001b[0m                                  \u001b[34m\u2502\u001b[39m                          \u001b[31m\u2502\n\u2502\u001b[39m \u001b[34m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m                          \u001b[31m\u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u001b[1m\u001b[91mDieNow: \u001b[39m(\u001b[0m\u001b[32m'could not determine project root dir'\u001b[39m, \u001b[1m{})\n\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:15 [\u001b[1m\u001b[38;5;124merror    ] \u001b[0mcould not determine project root dir [\u001b[38;5;5mlist\u001b[39m]\n</code></pre> <p>More Tools</p> <p><code>devapps</code> based applications usually define more, e.g. databases, more tools or log targets.</p> <p>Batteries Included - but Replaceable</p> <p>DevApps' resource management is only meant as a convenience machinery to quickly get up projects or dev setups up and running. In production you'll have more distributed setups anyway, installed e.g. via Ansible and/or Container Orchestrators.</p> <p>Means: You do not need to have those resources managed as shown below - we install \"normal\" versions, packaged as Conda packages and use standard config options (see previous chapter why).</p>"},{"location":"projects/usage/#project-init","title":"Project Init","text":"<p>Via the <code>--init_at</code> flag you set up a new project, within the given directory, plus its resources:</p> CmdOutput <pre><code>$ ops project --init_at . --port_offset 2000 --force\n$ tree -L 2\n</code></pre> <p></p> <pre><code>$ ops project --init_at . --port_offset 2000 --force\n\u001b[2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mchdir                          [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1margs=\u001b[2m\u001b[38;5;5m/home/runner/myproject \u001b[38;5;1mstore_log=\u001b[38;5;5mNone\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mDirectories                    [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mconda_prefix=\u001b[2m\u001b[38;5;5m/home/runner/micromamba \u001b[38;5;1mfs_dir=\u001b[38;5;5m/home/runner/micromamba/fs(default)\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[1m\u001b[38;5;124merror    ] \u001b[0mNot found                      [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mcmd=\u001b[2m\u001b[38;5;5m/home/runner/micromamba/envs/lc_tools/bin/git\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[1m\u001b[38;5;124merror    ] \u001b[0mNot found                      [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mcmd=\u001b[2m\u001b[38;5;5m/home/runner/micromamba/envs/lc_tools_kf/bin/rotatelogs\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[1m\u001b[38;5;124mwarning  ] \u001b[0mInstalling resources           [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mresources=\u001b[2m\u001b[38;5;5m[{'bin_name': 'lc_tools', 'conda_chan': 'conda-forge', 'conda_pkg': 'git fzf jq ripgrep fd-find httpie htop tmux', 'disabled': False, 'doc': 'The base class of the class hierarchy.\\n\\nWhen called, it accepts no arguments and returns a new featureless\\ninstance that has no instance attributes and cannot be given any.\\n', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools', 'installed': False, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'lc_tools', 'path': False, 'provides': ['git', 'fzf', 'jq', 'rg', 'fd', 'http', 'htop', 'tmux'], 'run': 'lc_tools', 'verify_present': 'verify_tools'}, {'bin_name': 'lc_tools_kf', 'conda_chan': 'kalefranz', 'conda_pkg': 'httpd', 'disabled': False, 'doc': 'The base class of the class hierarchy.\\n\\nWhen called, it accepts no arguments and returns a new featureless\\ninstance that has no instance attributes and cannot be given any.\\n', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools_kf', 'installed': False, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'lc_tools_kf', 'path': False, 'provides': ['rotatelogs'], 'verify_present': 'verify_tools'}, {'bin_name': 'redis_server', 'cmd': 'redis-server', 'disabled': False, 'doc': 'The base class of the class hierarchy.\\n\\nWhen called, it accepts no arguments and returns a new featureless\\ninstance that has no instance attributes and cannot be given any.\\n', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/redis_server', 'installed': False, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'redis_server', 'path': False, 'pkg': 'redis-server', 'port': 6379, 'provides': ['redis-server', 'redis-cli'], 'run': 'redis_server', 'systemd': 'redis-server'}, {'bin_name': 'slc', 'cmd': 'slc', 'disabled': False, 'doc': 'The base class of the class hierarchy.\\n\\nWhen called, it accepts no arguments and returns a new featureless\\ninstance that has no instance attributes and cannot be given any.\\n', 'environ': ['lc_hubs'], 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/slc', 'installed': False, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'slc', 'path': False, 'pkg': False}]\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mcreate_project_dirs            [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mstore_log=\u001b[2m\u001b[38;5;5mNone\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mcreating                       [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mdir=\u001b[2m\u001b[38;5;5m/home/runner/myproject/bin\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mcreating                       [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mdir=\u001b[2m\u001b[38;5;5m/home/runner/myproject/data\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mcreating                       [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mdir=\u001b[2m\u001b[38;5;5m/home/runner/myproject/log\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mcreating                       [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mdir=\u001b[2m\u001b[38;5;5m/home/runner/myproject/work\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mcreating                       [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mdir=\u001b[2m\u001b[38;5;5m/home/runner/myproject/conf\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mcreating                       [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mdir=\u001b[2m\u001b[38;5;5m/home/runner/myproject/tmp\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mcreating                       [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mdir=\u001b[2m\u001b[38;5;5m/home/runner/myproject/build\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mchdir                          [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1margs=\u001b[2m\u001b[38;5;5m/home/runner/myproject \u001b[38;5;1mstore_log=\u001b[38;5;5mNone\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:16 [\u001b[38;5;4minfo     ] \u001b[0mInstall.Conda.conda_env        [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mrsc=\u001b[2m\u001b[38;5;5m      lc_tools ['git', 'fzf', 'jq', 'rg', 'fd', 'http', 'htop', 'tmux'] \u001b[38;5;1mstore_log=\u001b[38;5;5mNone\n\u001b[0m-ne \n\u001b[38;5;240mEmpty environment created at prefix: /home/runner/micromamba/envs/lc_tools\n\nTransaction\n\n  Prefix: /home/runner/micromamba/envs/lc_tools\n\n  Updating specs:\n\n   - git\n   - fzf\n   - jq\n   - ripgrep\n   - fd-find\n   - httpie\n   - htop\n   - tmux\n\n  Package                    Version  Build               Channel          Size\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  Install:\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n  \u001b[32m+ _libgcc_mutex     \u001b[39m           0.1  conda_forge         conda-forge       3kB\n  \u001b[32m+ _openmp_mutex     \u001b[39m           4.5  2_gnu               conda-forge      24kB\n  \u001b[32m+ brotli-python     \u001b[39m         1.1.0  py313h46c70d0_3     conda-forge     350kB\n  \u001b[32m+ bzip2             \u001b[39m         1.0.8  h4bc722e_7          conda-forge     253kB\n  \u001b[32m+ c-ares            \u001b[39m        1.34.5  hb9d3cd8_0          conda-forge     207kB\n  \u001b[32m+ ca-certificates   \u001b[39m      2025.8.3  hbd8a1cb_0          conda-forge     154kB\n  \u001b[32m+ certifi           \u001b[39m      2025.8.3  pyhd8ed1ab_0        conda-forge     159kB\n  \u001b[32m+ cffi              \u001b[39m        1.17.1  py313hfab6e84_0     conda-forge     296kB\n  \u001b[32m+ charset-normalizer\u001b[39m         3.4.3  pyhd8ed1ab_0        conda-forge      51kB\n  \u001b[32m+ defusedxml        \u001b[39m         0.7.1  pyhd8ed1ab_0        conda-forge      24kB\n  \u001b[32m+ fd-find           \u001b[39m        10.2.0  h8fae777_1          conda-forge       1MB\n  \u001b[32m+ fzf               \u001b[39m        0.65.1  hf1419bc_0          conda-forge       3MB\n  \u001b[32m+ git               \u001b[39m        2.49.0  pl5321hc2ff736_2    conda-forge      11MB\n  \u001b[32m+ h2                \u001b[39m         4.2.0  pyhd8ed1ab_0        conda-forge      54kB\n  \u001b[32m+ hpack             \u001b[39m         4.1.0  pyhd8ed1ab_0        conda-forge      31kB\n  \u001b[32m+ htop              \u001b[39m         3.4.1  haa1a288_0          conda-forge     168kB\n  \u001b[32m+ httpie            \u001b[39m         3.2.4  pyh55f8243_1        conda-forge      94kB\n  \u001b[32m+ hyperframe        \u001b[39m         6.1.0  pyhd8ed1ab_0        conda-forge      17kB\n  \u001b[32m+ idna              \u001b[39m          3.10  pyhd8ed1ab_1        conda-forge      50kB\n  \u001b[32m+ jq                \u001b[39m         1.8.1  h73b1eb8_0          conda-forge     313kB\n  \u001b[32m+ keyutils          \u001b[39m         1.6.3  hb9d3cd8_0          conda-forge     134kB\n  \u001b[32m+ krb5              \u001b[39m        1.21.3  h659f571_0          conda-forge       1MB\n  \u001b[32m+ ld_impl_linux-64  \u001b[39m          2.44  h1423503_1          conda-forge     676kB\n  \u001b[32m+ libcurl           \u001b[39m        8.14.1  h332b0f4_0          conda-forge     450kB\n  \u001b[32m+ libedit           \u001b[39m  3.1.20250104  pl5321h7949ede_0    conda-forge     135kB\n  \u001b[32m+ libev             \u001b[39m          4.33  hd590300_2          conda-forge     113kB\n  \u001b[32m+ libevent          \u001b[39m        2.1.12  hf998b51_1          conda-forge     427kB\n  \u001b[32m+ libexpat          \u001b[39m         2.7.1  hecca717_0          conda-forge      75kB\n  \u001b[32m+ libffi            \u001b[39m         3.4.6  h2dba641_1          conda-forge      57kB\n  \u001b[32m+ libgcc            \u001b[39m        15.1.0  h767d61c_4          conda-forge     824kB\n  \u001b[32m+ libgcc-ng         \u001b[39m        15.1.0  h69a702a_4          conda-forge      29kB\n  \u001b[32m+ libgomp           \u001b[39m        15.1.0  h767d61c_4          conda-forge     447kB\n  \u001b[32m+ libiconv          \u001b[39m          1.18  h3b78370_2          conda-forge     790kB\n  \u001b[32m+ liblzma           \u001b[39m         5.8.1  hb9d3cd8_2          conda-forge     113kB\n  \u001b[32m+ libmpdec          \u001b[39m         4.0.0  hb9d3cd8_0          conda-forge      91kB\n  \u001b[32m+ libnghttp2        \u001b[39m        1.64.0  h161d5f1_0          conda-forge     648kB\n  \u001b[32m+ libnl             \u001b[39m        3.11.0  hb9d3cd8_0          conda-forge     741kB\n  \u001b[32m+ libsqlite         \u001b[39m        3.50.4  h0c1763c_0          conda-forge     933kB\n  \u001b[32m+ libssh2           \u001b[39m        1.11.1  hcf80075_0          conda-forge     305kB\n  \u001b[32m+ libstdcxx         \u001b[39m        15.1.0  h8f9b012_4          conda-forge       4MB\n  \u001b[32m+ libstdcxx-ng      \u001b[39m        15.1.0  h4852527_4          conda-forge      29kB\n  \u001b[32m+ libuuid           \u001b[39m        2.38.1  h0b41bf4_0          conda-forge      34kB\n  \u001b[32m+ libxcrypt         \u001b[39m        4.4.36  hd590300_1          conda-forge     100kB\n  \u001b[32m+ libzlib           \u001b[39m         1.3.1  hb9d3cd8_2          conda-forge      61kB\n  \u001b[32m+ markdown-it-py    \u001b[39m         4.0.0  pyhd8ed1ab_0        conda-forge      65kB\n  \u001b[32m+ mdurl             \u001b[39m         0.1.2  pyhd8ed1ab_1        conda-forge      14kB\n  \u001b[32m+ multidict         \u001b[39m         6.6.3  py313h8060acc_0     conda-forge      97kB\n  \u001b[32m+ ncurses           \u001b[39m           6.5  h2d0b736_3          conda-forge     892kB\n  \u001b[32m+ oniguruma         \u001b[39m        6.9.10  hb9d3cd8_0          conda-forge     249kB\n  \u001b[32m+ openssl           \u001b[39m         3.5.2  h26f9b46_0          conda-forge       3MB\n  \u001b[32m+ pcre2             \u001b[39m         10.45  hc749103_0          conda-forge       1MB\n  \u001b[32m+ perl              \u001b[39m        5.32.1  7_hd590300_perl5    conda-forge      13MB\n  \u001b[32m+ pip               \u001b[39m          25.2  pyh145f28c_0        conda-forge       1MB\n  \u001b[32m+ pycparser         \u001b[39m          2.22  pyh29332c3_1        conda-forge     110kB\n  \u001b[32m+ pygments          \u001b[39m        2.19.2  pyhd8ed1ab_0        conda-forge     889kB\n  \u001b[32m+ pysocks           \u001b[39m         1.7.1  pyha55dd90_7        conda-forge      21kB\n  \u001b[32m+ python            \u001b[39m        3.13.5  hec9711d_102_cp313  conda-forge      33MB\n  \u001b[32m+ python_abi        \u001b[39m          3.13  8_cp313             conda-forge       7kB\n  \u001b[32m+ readline          \u001b[39m           8.2  h8c095d6_2          conda-forge     282kB\n  \u001b[32m+ requests          \u001b[39m        2.32.4  pyhd8ed1ab_0        conda-forge      59kB\n  \u001b[32m+ requests-toolbelt \u001b[39m         1.0.0  pyhd8ed1ab_1        conda-forge      44kB\n  \u001b[32m+ rich              \u001b[39m        14.1.0  pyhe01879c_0        conda-forge     201kB\n  \u001b[32m+ ripgrep           \u001b[39m        14.1.1  h8fae777_1          conda-forge       2MB\n  \u001b[32m+ setuptools        \u001b[39m        80.9.0  pyhff2d567_0        conda-forge     749kB\n  \u001b[32m+ tk                \u001b[39m        8.6.13  noxft_hd72426e_102  conda-forge       3MB\n  \u001b[32m+ tmux              \u001b[39m           3.5  h4463017_0          conda-forge     469kB\n  \u001b[32m+ typing_extensions \u001b[39m        4.14.1  pyhe01879c_0        conda-forge      51kB\n  \u001b[32m+ tzdata            \u001b[39m         2025b  h78e105d_0          conda-forge     123kB\n  \u001b[32m+ urllib3           \u001b[39m         2.5.0  pyhd8ed1ab_0        conda-forge     102kB\n  \u001b[32m+ zstandard         \u001b[39m        0.23.0  py313h536fd9c_2     conda-forge     737kB\n  \u001b[32m+ zstd              \u001b[39m         1.5.7  hb8e6e7a_2          conda-forge     568kB\n\n  Summary:\n\n  Install: 71 packages\n\n  Total download: 93MB\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nTransaction starting\nLinking fzf-0.65.1-hf1419bc_0\nLinking ld_impl_linux-64-2.44-h1423503_1\nLinking libgomp-15.1.0-h767d61c_4\nLinking _libgcc_mutex-0.1-conda_forge\nLinking _openmp_mutex-4.5-2_gnu\nLinking libgcc-15.1.0-h767d61c_4\nLinking libmpdec-4.0.0-hb9d3cd8_0\nLinking libiconv-1.18-h3b78370_2\nLinking keyutils-1.6.3-hb9d3cd8_0\nLinking c-ares-1.34.5-hb9d3cd8_0\nLinking libzlib-1.3.1-hb9d3cd8_2\nLinking liblzma-5.8.1-hb9d3cd8_2\nLinking libffi-3.4.6-h2dba641_1\nLinking libexpat-2.7.1-hecca717_0\nLinking ncurses-6.5-h2d0b736_3\nLinking libstdcxx-15.1.0-h8f9b012_4\nLinking libgcc-ng-15.1.0-h69a702a_4\nLinking ripgrep-14.1.1-h8fae777_1\nLinking oniguruma-6.9.10-hb9d3cd8_0\nLinking libnl-3.11.0-hb9d3cd8_0\nLinking fd-find-10.2.0-h8fae777_1\nLinking libsqlite-3.50.4-h0c1763c_0\nLinking tk-8.6.13-noxft_hd72426e_102\nLinking libedit-3.1.20250104-pl5321h7949ede_0\nLinking readline-8.2-h8c095d6_2\nLinking libstdcxx-ng-15.1.0-h4852527_4\nLinking zstd-1.5.7-hb8e6e7a_2\nLinking libxcrypt-4.4.36-hd590300_1\nLinking libev-4.33-hd590300_2\nLinking bzip2-1.0.8-h4bc722e_7\nLinking libuuid-2.38.1-h0b41bf4_0\nLinking jq-1.8.1-h73b1eb8_0\nLinking htop-3.4.1-haa1a288_0\nLinking perl-5.32.1-7_hd590300_perl5\nLinking pcre2-10.45-hc749103_0\nLinking python_abi-3.13-8_cp313\nLinking tzdata-2025b-h78e105d_0\nLinking ca-certificates-2025.8.3-hbd8a1cb_0\nLinking openssl-3.5.2-h26f9b46_0\nLinking libssh2-1.11.1-hcf80075_0\nLinking libevent-2.1.12-hf998b51_1\nLinking python-3.13.5-hec9711d_102_cp313\nLinking libnghttp2-1.64.0-h161d5f1_0\nLinking krb5-1.21.3-h659f571_0\nLinking tmux-3.5-h4463017_0\nLinking libcurl-8.14.1-h332b0f4_0\nLinking git-2.49.0-pl5321hc2ff736_2\nLinking pip-25.2-pyh145f28c_0\nLinking pycparser-2.22-pyh29332c3_1\nLinking pysocks-1.7.1-pyha55dd90_7\nLinking hyperframe-6.1.0-pyhd8ed1ab_0\nLinking hpack-4.1.0-pyhd8ed1ab_0\nLinking mdurl-0.1.2-pyhd8ed1ab_1\nLinking idna-3.10-pyhd8ed1ab_1\nLinking certifi-2025.8.3-pyhd8ed1ab_0\nLinking typing_extensions-4.14.1-pyhe01879c_0\nLinking defusedxml-0.7.1-pyhd8ed1ab_0\nLinking pygments-2.19.2-pyhd8ed1ab_0\nLinking charset-normalizer-3.4.3-pyhd8ed1ab_0\nLinking setuptools-80.9.0-pyhff2d567_0\nLinking h2-4.2.0-pyhd8ed1ab_0\nLinking markdown-it-py-4.0.0-pyhd8ed1ab_0\nLinking rich-14.1.0-pyhe01879c_0\nLinking brotli-python-1.1.0-py313h46c70d0_3\nLinking multidict-6.6.3-py313h8060acc_0\nLinking cffi-1.17.1-py313hfab6e84_0\nLinking zstandard-0.23.0-py313h536fd9c_2\nLinking urllib3-2.5.0-pyhd8ed1ab_0\nLinking requests-2.32.4-pyhd8ed1ab_0\nLinking requests-toolbelt-1.0.0-pyhd8ed1ab_1\nLinking httpie-3.2.4-pyh55f8243_1\n\nTransaction finished\n\n-ne \n\u001b[2m\u001b[38;5;5m08-15 09:42:31 [\u001b[38;5;4minfo     ] \u001b[0mInstall.Conda.conda_env        [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mrsc=\u001b[2m\u001b[38;5;5m      lc_tools_kf ['rotatelogs'] \u001b[38;5;1mstore_log=\u001b[38;5;5mNone\n\u001b[0m-ne \n\u001b[38;5;240mEmpty environment created at prefix: /home/runner/micromamba/envs/lc_tools_kf\nconda-forge/linux-64                                        Using cache\nconda-forge/noarch                                          Using cache\n\nTransaction\n\n  Prefix: /home/runner/micromamba/envs/lc_tools_kf\n\n  Updating specs:\n\n   - httpd\n\n  Package             Version  Build        Channel           Size\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  Install:\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n  \u001b[32m+ _libgcc_mutex  \u001b[39m       0.1  conda_forge  conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ _openmp_mutex  \u001b[39m       4.5  2_gnu        conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ ca-certificates\u001b[39m  2025.8.3  hbd8a1cb_0   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ httpd          \u001b[39m    2.4.12  6            kalefranz          8MB\n  \u001b[32m+ libgcc         \u001b[39m    15.1.0  h767d61c_4   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ libgcc-ng      \u001b[39m    15.1.0  h69a702a_4   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ libgomp        \u001b[39m    15.1.0  h767d61c_4   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ libstdcxx      \u001b[39m    15.1.0  h8f9b012_4   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ libstdcxx-ng   \u001b[39m    15.1.0  h4852527_4   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ libzlib        \u001b[39m     1.3.1  hb9d3cd8_2   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ openssl        \u001b[39m     3.5.2  h26f9b46_0   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ pcre           \u001b[39m      8.45  h9c3ff4c_0   conda-forge      259kB\n  \u001b[32m+ zlib           \u001b[39m     1.3.1  hb9d3cd8_2   conda-forge       92kB\n\n  Summary:\n\n  Install: 13 packages\n\n  Total download: 8MB\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nTransaction starting\nLinking ca-certificates-2025.8.3-hbd8a1cb_0\nLinking libgomp-15.1.0-h767d61c_4\nLinking _libgcc_mutex-0.1-conda_forge\nLinking _openmp_mutex-4.5-2_gnu\nLinking libgcc-15.1.0-h767d61c_4\nLinking libstdcxx-15.1.0-h8f9b012_4\nLinking libgcc-ng-15.1.0-h69a702a_4\nLinking libzlib-1.3.1-hb9d3cd8_2\nLinking openssl-3.5.2-h26f9b46_0\nLinking libstdcxx-ng-15.1.0-h4852527_4\nLinking zlib-1.3.1-hb9d3cd8_2\nLinking pcre-8.45-h9c3ff4c_0\nLinking httpd-2.4.12-6\n\nTransaction finished\n\n-ne \n\u001b[2m\u001b[38;5;5m08-15 09:42:40 [\u001b[38;5;4minfo     ] \u001b[0mInstall.Conda.conda_env        [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mrsc=\u001b[2m\u001b[38;5;5ms     redis-server ['redis-server', 'redis-cli'] \u001b[38;5;1mstore_log=\u001b[38;5;5mNone\n\u001b[0m-ne \n\u001b[38;5;240mEmpty environment created at prefix: /home/runner/micromamba/envs/redis_server\nconda-forge/linux-64                                        Using cache\nconda-forge/noarch                                          Using cache\n\nTransaction\n\n  Prefix: /home/runner/micromamba/envs/redis_server\n\n  Updating specs:\n\n   - redis-server\n\n  Package             Version  Build        Channel           Size\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  Install:\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n  \u001b[32m+ _libgcc_mutex  \u001b[39m       0.1  conda_forge  conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ _openmp_mutex  \u001b[39m       4.5  2_gnu        conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ ca-certificates\u001b[39m  2025.8.3  hbd8a1cb_0   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ libgcc         \u001b[39m    15.1.0  h767d61c_4   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ libgcc-ng      \u001b[39m    15.1.0  h69a702a_4   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ libgomp        \u001b[39m    15.1.0  h767d61c_4   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ openssl        \u001b[39m     3.5.2  h26f9b46_0   conda-forge\u001b[32m     Cached\n\u001b[39m  \u001b[32m+ redis-server   \u001b[39m     7.4.0  h3400bea_0   conda-forge        9MB\n\n  Summary:\n\n  Install: 8 packages\n\n  Total download: 9MB\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nTransaction starting\nLinking ca-certificates-2025.8.3-hbd8a1cb_0\nLinking libgomp-15.1.0-h767d61c_4\nLinking _libgcc_mutex-0.1-conda_forge\nLinking _openmp_mutex-4.5-2_gnu\nLinking libgcc-15.1.0-h767d61c_4\nLinking openssl-3.5.2-h26f9b46_0\nLinking libgcc-ng-15.1.0-h69a702a_4\nLinking redis-server-7.4.0-h3400bea_0\n\nTransaction finished\n\n-ne \n\u001b[2m\u001b[38;5;5m08-15 09:42:43 [\u001b[38;5;4minfo     ] \u001b[0mInstall.no_pkg                 [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mrsc=\u001b[2m\u001b[38;5;5m      slc  \u001b[38;5;1mstore_log=\u001b[38;5;5mNone\n\u001b[0;2m\u001b[38;5;5m08-15 09:42:43 [\u001b[38;5;4minfo     ] \u001b[0mNo package resource - no install [\u001b[38;5;5mproject\u001b[39m]\n\u001b[2m\u001b[38;5;5m08-15 09:42:43 [\u001b[38;5;4minfo     ] \u001b[0mgit_init                       [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[38;5;1mstore_log=\u001b[2m\u001b[38;5;5mNone\n\u001b[0m-ne \n\u001b[33mhint: Using 'master' as the name for the initial branch. This default branch name\nhint: is subject to change. To configure the initial branch name to use in all\nhint: of your new repositories, which will suppress this warning, call:\nhint:\nhint: \u001b[39m  \u001b[33mgit config --global init.defaultBranch &lt;name&gt;\nhint:\nhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\nhint: 'development'. The just-created branch can be renamed via this command:\nhint:\nhint: \u001b[39m  \u001b[33mgit branch -m &lt;name&gt;\n\u001b[39mInitialized empty Git repository in /home/runner/myproject/.git/\n-ne\n$ tree -L 2\n.\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 fd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 fzf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 git\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 htop\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 http\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jq\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 redis-cli\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 redis-server\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rotatelogs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 slc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tmux\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 conf\n\u251c\u2500\u2500 data\n\u251c\u2500\u2500 log\n\u251c\u2500\u2500 tmp\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tmux\n\u2514\u2500\u2500 work\n\n9 directories, 12 files\n</code></pre> <p>As you can see, we created start files in the <code>bin</code> subdirectory of the project directory, pointing to where the actual binaries had been installed. We did set a global <code>port_offset</code>, which affects any port of listening resources started.</p> <p>Controlling Resources Installation</p> <p>There are few options regarding which resources are to be installed, where. See the output of the <code>-h</code> regarding this:</p> CmdOutput <pre><code>$ ops p -h\n</code></pre> <p></p> <pre><code>$ ops p -h\n\n\u001b[1m\u001b[38;5;11mCreating A Project With Resources\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u001b[0mThis plugin is helper for creating a project directory, incl. required local\nresources. Your system remains unchanged, except &lt;project_dir&gt; and\n&lt;conda_prefix&gt;.\n\nIt provides an \u001b[38;5;5minstall\u001b[39m action (implicitely by providing the\n--init_resource_match or --init_at switch)\n\nDefault action is: \u001b[38;5;5mlist\u001b[39m (show installable resources, -m &lt;match&gt; filters).\n\nAt install we will (re-)initialize a \"project_dir\", at location given with\n--init_at (default: '.'), incl:\n\n\u001b[38;5;5m\u2756 \u001b[39mInstalling available resources, like databases and tools within a given\n  directory (conda_prefix)\n\n\u001b[38;5;5m\u2756 \u001b[39mCreating resource start wrappers in &lt;project_dir&gt;/bin\n\n\u001b[38;5;5m\u2756 \u001b[39mGenerating default config when required\n\n\u001b[38;5;5m\u2756 \u001b[39mOptionally generating systemd unit files (e.g. via: --init_create_all_units)\n\n\u001b[38;5;5m\u2756 \u001b[39mInstances support: export &lt;name&gt;_instances=x before running and you'll get x\n  systemd units created, for startable commands.\n\n\u001b[38;5;5m  Example: export client_instances=10; ops p -irm client -icau\n  (Name of a resource: ops p [-m &lt;match&gt;])\n\n\u2756 \u001b[39mAny other parametrization: Via environ variables Check key environ vars in\n  list output and also doc text.\n\nPrivilege escalation is not required for any of these steps.\n\nMain command line flags [matching \u001b[1m\u001b[32mops_devapp.project\u001b[0m]:\n\u001b[32mappc    \u001b[1m\u001b[33madd_post_process_cmd     \u001b[0m\u001b[31m''\n\u001b[38;5;245mAdd this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty.\nExample: -appc='2&gt;&amp;1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -&gt; use single quotes).\nTip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \n\u001b[32mcp      \u001b[1m\u001b[33mconda_prefix             \u001b[0m\u001b[31m/home/runner/micromamba\n\n\u001b[38;5;245m    Resources install location, except filesystem based ones. Env vars resolved.\n\n    Aliases:\n    - local|l: &lt;project_dir&gt;/conda\n    - default|d: $HOME/miniconda3 (default path of conda)\n    - current|c: Any current conda_prefix set when running.\n\n    Note: Installing resources outside the project keeps the project relocatable and resources reusable for other products.\n\n\u001b[32mcsu     \u001b[1m\u001b[33mcreate_system_units      \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mInstead of user unit files, create system files, in /etc/systemd/system. Implies -icau. \ud83d\udfe5 A sudo password is required! \n\u001b[32mdamsu   \u001b[1m\u001b[33mdelete_all_matching_service_unit_files \u001b[0m\u001b[31m''\n\u001b[38;5;245mThis removes all matching unit files calling devapp service wrappers. Say \"service\" to match all \n\u001b[32mdi      \u001b[1m\u001b[33mdev_install              \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mSet the project up in developer mode - incl. make and poetry file machinery \n\u001b[32memrf    \u001b[1m\u001b[33medit_matching_resource_file \u001b[0m\u001b[31m''\n\u001b[38;5;245mOpen resource files in $EDITOR, matching given string in their content \n\u001b[32mf       \u001b[1m\u001b[33mforce                    \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mAssume y on all questions. Required when started w/o a tty \n\u001b[32mfr      \u001b[1m\u001b[33mforce_reinstall          \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mDo not only install resources detected uninstalled but reinstall all \n\u001b[32mfd      \u001b[1m\u001b[33mfs_dir                   \u001b[0m\u001b[31mdefault\n\n\u001b[38;5;245m    Filesystem based resource location. Env vars resolved.\n    Aliases:\n    - local|l: &lt;project_dir&gt;/fs\n    - default|d: $HOME/miniconda3/fs (default path of conda)\n    - conda|c: Within conda_prefix/fs\n\n\u001b[32mia      \u001b[1m\u001b[33minit_at                  \u001b[0m\u001b[31m''\n\u001b[38;5;245mSet up project in given directory. env vars / relative dirs supported. Sets install action implicitly \n\u001b[32micau    \u001b[1m\u001b[33minit_create_all_units    \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mIf set we create (user) unit files for service type resources \n\u001b[32micuf    \u001b[1m\u001b[33minit_create_unit_files   \u001b[0m\u001b[31m''\n\u001b[38;5;245mList service unit files you want to have created for systemctl --user.  \n\u001b[38;5;241mValid: Entries in rsc.provides, rsc.cmd or rsc.exe (i.e. the filename of the wrapper in bin dir). Not: rsc.name.\n\u001b[32mirm     \u001b[1m\u001b[33minit_resource_match      \u001b[0m\u001b[31m''\n\u001b[38;5;245mLike resource match but implies install action \n\u001b[32mi       \u001b[1m\u001b[33minstall                  \u001b[0m\u001b[33mACTION\n\u001b[38;5;245mInstall \n\u001b[32mis      \u001b[1m\u001b[33minstall_state            \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mshow install state infos \n\u001b[32ml       \u001b[1m\u001b[33mlist                     ACTION*\n\u001b[0m\u001b[38;5;245mShow available definition files. \n\u001b[32mlrf     \u001b[1m\u001b[33mlist_resources_files     \u001b[0m\u001b[33mACTION\n\u001b[38;5;245mAlias for list action \n\u001b[32mloref   \u001b[1m\u001b[33mlog_resources_fully      \u001b[0m\u001b[31mFalse\n\u001b[38;5;245mAlways output all settings of resources when logging \n\u001b[32mm       \u001b[1m\u001b[33mresource_match           \u001b[0m\u001b[31m''\n\u001b[38;5;245mProvide a match string for actions. Examples: -irm \"redis, hub\" or -irm '!mysql, !redis' (! negates).\n\n\u001b[36m-hf [match string]\u001b[39m: List \u001b[1m\u001b[36mALL\u001b[0m (matching) flags. E.g. -hf or -hf log.\n</code></pre> <p>More CLI flags</p> <p>More control flags are only accessible via <code>--helpfull &lt;match&gt;</code> (<code>-hf</code>): Try <code>ops p -hf log_level</code>, <code>ops p -hf port</code> (...)</p> Project initialization flags <p>In the example above, a <code>--port_offset=2000</code> flag was given, determining the start parameters written into the redis wrapper:</p> <p> <pre><code>$ bin/redis-server\n4443:C 15 Aug 2025 09:42:48.105 # WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\n4443:C 15 Aug 2025 09:42:48.105 * oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n4443:C 15 Aug 2025 09:42:48.105 * Redis version=7.4.0, bits=64, commit=abcd3ea3, modified=0, pid=4443, just started\n4443:C 15 Aug 2025 09:42:48.105 * Configuration loaded\n4443:M 15 Aug 2025 09:42:48.106 * monotonic clock: POSIX clock_gettime\n                _._                                                  \n           _.-``__ ''-._                                             \n      _.-``    `.  `_.  ''-._           Redis Community Edition      \n  .-`` .-```.  ```\\/    _.,_ ''-._     7.4.0 (abcd3ea3/0) 64 bit\n (    '      ,       .-`  | `,    )     Running in standalone mode\n |`-._`-...-` __...-.``-._|'` _.-'|     Port: 8379\n |    `-._   `._    /     _.-'    |     PID: 4443\n  `-._    `-._  `-./  _.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |           https://redis.io       \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n |`-._`-._    `-.__.-'    _.-'_.-'|                                  \n |    `-._`-._        _.-'_.-'    |                                  \n  `-._    `-._`-.__.-'_.-'    _.-'                                   \n      `-._    `-.__.-'    _.-'                                       \n          `-._        _.-'                                           \n              `-.__.-'                                               \n\n4443:M 15 Aug 2025 09:42:48.106 * Server initialized\n4443:M 15 Aug 2025 09:42:48.106 * Ready to accept connections tcp\n</code></pre> </p> <p>Idempotency</p> <p>If you need to re-parametrize the project (e.g. set different port offsets) then run <code>ops project --init_at</code> again and have new start wrappers created.</p>"},{"location":"projects/usage/#unit-files","title":"Unit Files","text":"<p>We do not try to manage the live cycle of services but leave that to systemd (available on all Linux major distributions).</p> <p>The <code>--init_create_unit_files=&lt;name of daemon resource&gt;</code> will create a unit file after installing the resource itself:</p> <p>Creating a resource incl. unit file</p> <p>```bash xlp session=project ops project --init_at=. --init_create_unit_files=redis-server --force <pre><code>You control the service using `systemctl --user`:\n\n```bash xlp session=project\n[\n{'cmd': 'systemctl --user --no-pager start  redis-server-myproject'},\n{'cmd': 'systemctl --user --no-pager status redis-server-myproject', 'assert': '(running)'},\n{'cmd': 'systemctl --user --no-pager stop   redis-server-myproject'}\n]\n</code></pre></p> <p>Hint</p> <p>In order to install unit files for ALL service type resources, you can  supply <code>--init_create_all_units</code>, alternatively.</p> <ol> <li> <p>Technically <code>project</code> is implemented as a plugin of the <code>ops</code> tool.\u00a0\u21a9</p> </li> </ol>"}]}